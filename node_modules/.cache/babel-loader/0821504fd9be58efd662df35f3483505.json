{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar WFParameter_1 = require(\"./WFParameter\");\n\nvar WFVariableFieldParameter =\n/*#__PURE__*/\nfunction (_WFParameter_1$WFPara) {\n  _inherits(WFVariableFieldParameter, _WFParameter_1$WFPara);\n\n  function WFVariableFieldParameter(data) {\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Variable Input\";\n    var docs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"https://pfgithub.github.io/shortcutslang/gettingstarted#variable-field\";\n\n    _classCallCheck(this, WFVariableFieldParameter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WFVariableFieldParameter).call(this, data, name, docs));\n  }\n\n  _createClass(WFVariableFieldParameter, [{\n    key: \"genDocsArgName\",\n    value: function genDocsArgName() {\n      return \"(v:variableName | variableName)\";\n    }\n  }, {\n    key: \"genDocs\",\n    value: function genDocs() {\n      var docs = \"\".concat(_get(_getPrototypeOf(WFVariableFieldParameter.prototype), \"genDocs\", this).call(this), \"\\n\\nAccepts a string with the name of the named variable (v:) you want to set,\\nor a named variable (v:) that you want to set.\\n\");\n      return docs;\n    }\n  }, {\n    key: \"build\",\n    value: function build(cc, parse) {\n      var varname = parse.canBeString(cc) ? parse.asString(cc) : parse.canBeStringVariable(cc) ? parse.asStringVariable(cc) : function () {\n        throw parse.error(cc, \"Variable fields only accept strings and named variables with no aggrandizements.\");\n      }();\n      cc.setNamedVariable(varname);\n      return varname;\n    }\n  }]);\n\n  return WFVariableFieldParameter;\n}(WFParameter_1.WFParameter);\n\nexports.WFVariableFieldParameter = WFVariableFieldParameter;","map":null,"metadata":{},"sourceType":"script"}