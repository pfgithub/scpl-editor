{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash.isequal\"));\n\nvar _editorOptions = require(\"./editorOptions.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar ace = (0, _editorOptions.getAceInstance)();\n\nvar _ace$acequire = ace.acequire(\"ace/range\"),\n    Range = _ace$acequire.Range;\n\nvar ReactAce =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ReactAce, _Component);\n\n  function ReactAce(props) {\n    var _this;\n\n    _classCallCheck(this, ReactAce);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactAce).call(this, props));\n\n    _editorOptions.editorEvents.forEach(function (method) {\n      _this[method] = _this[method].bind(_assertThisInitialized(_this));\n    });\n\n    _this.debounce = _editorOptions.debounce;\n    return _this;\n  }\n\n  _createClass(ReactAce, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          onBeforeLoad = _this$props.onBeforeLoad,\n          onValidate = _this$props.onValidate,\n          mode = _this$props.mode,\n          focus = _this$props.focus,\n          theme = _this$props.theme,\n          fontSize = _this$props.fontSize,\n          value = _this$props.value,\n          defaultValue = _this$props.defaultValue,\n          cursorStart = _this$props.cursorStart,\n          showGutter = _this$props.showGutter,\n          wrapEnabled = _this$props.wrapEnabled,\n          showPrintMargin = _this$props.showPrintMargin,\n          _this$props$scrollMar = _this$props.scrollMargin,\n          scrollMargin = _this$props$scrollMar === void 0 ? [0, 0, 0, 0] : _this$props$scrollMar,\n          keyboardHandler = _this$props.keyboardHandler,\n          onLoad = _this$props.onLoad,\n          commands = _this$props.commands,\n          annotations = _this$props.annotations,\n          markers = _this$props.markers,\n          placeholder = _this$props.placeholder;\n      this.editor = ace.edit(this.refEditor);\n\n      if (onBeforeLoad) {\n        onBeforeLoad(ace);\n      }\n\n      var editorProps = Object.keys(this.props.editorProps);\n\n      for (var i = 0; i < editorProps.length; i++) {\n        this.editor[editorProps[i]] = this.props.editorProps[editorProps[i]];\n      }\n\n      if (this.props.debounceChangePeriod) {\n        this.onChange = this.debounce(this.onChange, this.props.debounceChangePeriod);\n      }\n\n      this.editor.renderer.setScrollMargin(scrollMargin[0], scrollMargin[1], scrollMargin[2], scrollMargin[3]);\n      this.editor.getSession().setMode(\"ace/mode/\".concat(mode));\n      this.editor.setTheme(\"ace/theme/\".concat(theme));\n      this.editor.setFontSize(fontSize);\n      this.editor.getSession().setValue(!defaultValue ? value : defaultValue, cursorStart);\n\n      if (this.props.navigateToFileEnd) {\n        this.editor.navigateFileEnd();\n      }\n\n      this.editor.renderer.setShowGutter(showGutter);\n      this.editor.getSession().setUseWrapMode(wrapEnabled);\n      this.editor.setShowPrintMargin(showPrintMargin);\n      this.editor.on(\"focus\", this.onFocus);\n      this.editor.on(\"blur\", this.onBlur);\n      this.editor.on(\"copy\", this.onCopy);\n      this.editor.on(\"paste\", this.onPaste);\n      this.editor.on(\"change\", this.onChange);\n      this.editor.on(\"input\", this.onInput);\n\n      if (placeholder) {\n        this.updatePlaceholder(this.editor, placeholder);\n      }\n\n      this.editor.getSession().selection.on(\"changeSelection\", this.onSelectionChange);\n      this.editor.getSession().selection.on(\"changeCursor\", this.onCursorChange);\n\n      if (onValidate) {\n        this.editor.getSession().on(\"changeAnnotation\", function () {\n          var annotations = _this2.editor.getSession().getAnnotations();\n\n          _this2.props.onValidate(annotations);\n        });\n      }\n\n      this.editor.session.on(\"changeScrollTop\", this.onScroll);\n      this.editor.getSession().setAnnotations(annotations || []);\n\n      if (markers && markers.length > 0) {\n        this.handleMarkers(markers);\n      } // get a list of possible options to avoid 'misspelled option errors'\n\n\n      var availableOptions = this.editor.$options;\n\n      for (var _i = 0; _i < _editorOptions.editorOptions.length; _i++) {\n        var option = _editorOptions.editorOptions[_i];\n\n        if (availableOptions.hasOwnProperty(option)) {\n          this.editor.setOption(option, this.props[option]);\n        } else if (this.props[option]) {\n          console.warn(\"ReactAce: editor option \".concat(option, \" was activated but not found. Did you need to import a related tool or did you possibly mispell the option?\"));\n        }\n      }\n\n      this.handleOptions(this.props);\n\n      if (Array.isArray(commands)) {\n        commands.forEach(function (command) {\n          if (typeof command.exec == \"string\") {\n            _this2.editor.commands.bindKey(command.bindKey, command.exec);\n          } else {\n            _this2.editor.commands.addCommand(command);\n          }\n        });\n      }\n\n      if (keyboardHandler) {\n        this.editor.setKeyboardHandler(\"ace/keyboard/\" + keyboardHandler);\n      }\n\n      if (className) {\n        this.refEditor.className += \" \" + className;\n      }\n\n      if (onLoad) {\n        onLoad(this.editor);\n      }\n\n      this.editor.resize();\n\n      if (focus) {\n        this.editor.focus();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var oldProps = prevProps;\n      var nextProps = this.props;\n\n      for (var i = 0; i < _editorOptions.editorOptions.length; i++) {\n        var option = _editorOptions.editorOptions[i];\n\n        if (nextProps[option] !== oldProps[option]) {\n          this.editor.setOption(option, nextProps[option]);\n        }\n      }\n\n      if (nextProps.className !== oldProps.className) {\n        var appliedClasses = this.refEditor.className;\n        var appliedClassesArray = appliedClasses.trim().split(\" \");\n        var oldClassesArray = oldProps.className.trim().split(\" \");\n        oldClassesArray.forEach(function (oldClass) {\n          var index = appliedClassesArray.indexOf(oldClass);\n          appliedClassesArray.splice(index, 1);\n        });\n        this.refEditor.className = \" \" + nextProps.className + \" \" + appliedClassesArray.join(\" \");\n      } // First process editor value, as it may create a new session (see issue #300)\n\n\n      if (this.editor && this.editor.getValue() !== nextProps.value) {\n        // editor.setValue is a synchronous function call, change event is emitted before setValue return.\n        this.silent = true;\n        var pos = this.editor.session.selection.toJSON();\n        this.editor.setValue(nextProps.value, nextProps.cursorStart);\n        this.editor.session.selection.fromJSON(pos);\n        this.silent = false;\n      }\n\n      if (nextProps.placeholder !== oldProps.placeholder) {\n        this.updatePlaceholder();\n      }\n\n      if (nextProps.mode !== oldProps.mode) {\n        this.editor.getSession().setMode(\"ace/mode/\" + nextProps.mode);\n      }\n\n      if (nextProps.theme !== oldProps.theme) {\n        this.editor.setTheme(\"ace/theme/\" + nextProps.theme);\n      }\n\n      if (nextProps.keyboardHandler !== oldProps.keyboardHandler) {\n        if (nextProps.keyboardHandler) {\n          this.editor.setKeyboardHandler(\"ace/keyboard/\" + nextProps.keyboardHandler);\n        } else {\n          this.editor.setKeyboardHandler(null);\n        }\n      }\n\n      if (nextProps.fontSize !== oldProps.fontSize) {\n        this.editor.setFontSize(nextProps.fontSize);\n      }\n\n      if (nextProps.wrapEnabled !== oldProps.wrapEnabled) {\n        this.editor.getSession().setUseWrapMode(nextProps.wrapEnabled);\n      }\n\n      if (nextProps.showPrintMargin !== oldProps.showPrintMargin) {\n        this.editor.setShowPrintMargin(nextProps.showPrintMargin);\n      }\n\n      if (nextProps.showGutter !== oldProps.showGutter) {\n        this.editor.renderer.setShowGutter(nextProps.showGutter);\n      }\n\n      if (!(0, _lodash[\"default\"])(nextProps.setOptions, oldProps.setOptions)) {\n        this.handleOptions(nextProps);\n      }\n\n      if (!(0, _lodash[\"default\"])(nextProps.annotations, oldProps.annotations)) {\n        this.editor.getSession().setAnnotations(nextProps.annotations || []);\n      }\n\n      if (!(0, _lodash[\"default\"])(nextProps.markers, oldProps.markers) && Array.isArray(nextProps.markers)) {\n        this.handleMarkers(nextProps.markers);\n      } // this doesn't look like it works at all....\n\n\n      if (!(0, _lodash[\"default\"])(nextProps.scrollMargin, oldProps.scrollMargin)) {\n        this.handleScrollMargins(nextProps.scrollMargin);\n      }\n\n      if (prevProps.height !== this.props.height || prevProps.width !== this.props.width) {\n        this.editor.resize();\n      }\n\n      if (this.props.focus && !prevProps.focus) {\n        this.editor.focus();\n      }\n    }\n  }, {\n    key: \"handleScrollMargins\",\n    value: function handleScrollMargins() {\n      var margins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0, 0];\n      this.editor.renderer.setScrollMargins(margins[0], margins[1], margins[2], margins[3]);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.editor.destroy();\n      this.editor = null;\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(event) {\n      if (this.props.onChange && !this.silent) {\n        var value = this.editor.getValue();\n        this.props.onChange(value, event);\n      }\n    }\n  }, {\n    key: \"onSelectionChange\",\n    value: function onSelectionChange(event) {\n      if (this.props.onSelectionChange) {\n        var value = this.editor.getSelection();\n        this.props.onSelectionChange(value, event);\n      }\n    }\n  }, {\n    key: \"onCursorChange\",\n    value: function onCursorChange(event) {\n      if (this.props.onCursorChange) {\n        var value = this.editor.getSelection();\n        this.props.onCursorChange(value, event);\n      }\n    }\n  }, {\n    key: \"onInput\",\n    value: function onInput(event) {\n      if (this.props.onInput) {\n        this.props.onInput(event);\n      }\n\n      if (this.props.placeholder) {\n        this.updatePlaceholder();\n      }\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(event) {\n      if (this.props.onFocus) {\n        this.props.onFocus(event, this.editor);\n      }\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur(event) {\n      if (this.props.onBlur) {\n        this.props.onBlur(event, this.editor);\n      }\n    }\n  }, {\n    key: \"onCopy\",\n    value: function onCopy(text) {\n      if (this.props.onCopy) {\n        this.props.onCopy(text);\n      }\n    }\n  }, {\n    key: \"onPaste\",\n    value: function onPaste(text) {\n      if (this.props.onPaste) {\n        this.props.onPaste(text);\n      }\n    }\n  }, {\n    key: \"onScroll\",\n    value: function onScroll() {\n      if (this.props.onScroll) {\n        this.props.onScroll(this.editor);\n      }\n    }\n  }, {\n    key: \"handleOptions\",\n    value: function handleOptions(props) {\n      var setOptions = Object.keys(props.setOptions);\n\n      for (var y = 0; y < setOptions.length; y++) {\n        this.editor.setOption(setOptions[y], props.setOptions[setOptions[y]]);\n      }\n    }\n  }, {\n    key: \"handleMarkers\",\n    value: function handleMarkers(markers) {\n      var _this3 = this; // remove foreground markers\n\n\n      var currentMarkers = this.editor.getSession().getMarkers(true);\n\n      for (var i in currentMarkers) {\n        if (currentMarkers.hasOwnProperty(i)) {\n          this.editor.getSession().removeMarker(currentMarkers[i].id);\n        }\n      } // remove background markers except active line marker and selected word marker\n\n\n      currentMarkers = this.editor.getSession().getMarkers(false);\n\n      for (var _i2 in currentMarkers) {\n        if (currentMarkers.hasOwnProperty(_i2) && currentMarkers[_i2].clazz !== \"ace_active-line\" && currentMarkers[_i2].clazz !== \"ace_selected-word\") {\n          this.editor.getSession().removeMarker(currentMarkers[_i2].id);\n        }\n      } // add new markers\n\n\n      markers.forEach(function (_ref) {\n        var startRow = _ref.startRow,\n            startCol = _ref.startCol,\n            endRow = _ref.endRow,\n            endCol = _ref.endCol,\n            className = _ref.className,\n            type = _ref.type,\n            _ref$inFront = _ref.inFront,\n            inFront = _ref$inFront === void 0 ? false : _ref$inFront;\n        var range = new Range(startRow, startCol, endRow, endCol);\n\n        _this3.editor.getSession().addMarker(range, className, type, inFront);\n      });\n    }\n  }, {\n    key: \"updatePlaceholder\",\n    value: function updatePlaceholder() {\n      // Adapted from https://stackoverflow.com/questions/26695708/how-can-i-add-placeholder-text-when-the-editor-is-empty\n      var editor = this.editor;\n      var placeholder = this.props.placeholder;\n      var showPlaceholder = !editor.session.getValue().length;\n      var node = editor.renderer.placeholderNode;\n\n      if (!showPlaceholder && node) {\n        editor.renderer.scroller.removeChild(editor.renderer.placeholderNode);\n        editor.renderer.placeholderNode = null;\n      } else if (showPlaceholder && !node) {\n        node = editor.renderer.placeholderNode = document.createElement(\"div\");\n        node.textContent = placeholder || \"\";\n        node.className = \"ace_comment ace_placeholder\";\n        node.style.padding = \"0 9px\";\n        node.style.position = \"absolute\";\n        node.style.zIndex = \"3\";\n        editor.renderer.scroller.appendChild(node);\n      } else if (showPlaceholder && node) {\n        node.textContent = placeholder;\n      }\n    }\n  }, {\n    key: \"updateRef\",\n    value: function updateRef(item) {\n      this.refEditor = item;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          name = _this$props2.name,\n          width = _this$props2.width,\n          height = _this$props2.height,\n          style = _this$props2.style;\n\n      var divStyle = _objectSpread({\n        width: width,\n        height: height\n      }, style);\n\n      return _react[\"default\"].createElement(\"div\", {\n        ref: this.updateRef,\n        id: name,\n        style: divStyle\n      });\n    }\n  }]);\n\n  return ReactAce;\n}(_react.Component);\n\nexports[\"default\"] = ReactAce;\nReactAce.propTypes = {\n  mode: _propTypes[\"default\"].string,\n  focus: _propTypes[\"default\"].bool,\n  theme: _propTypes[\"default\"].string,\n  name: _propTypes[\"default\"].string,\n  className: _propTypes[\"default\"].string,\n  height: _propTypes[\"default\"].string,\n  width: _propTypes[\"default\"].string,\n  fontSize: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n  showGutter: _propTypes[\"default\"].bool,\n  onChange: _propTypes[\"default\"].func,\n  onCopy: _propTypes[\"default\"].func,\n  onPaste: _propTypes[\"default\"].func,\n  onFocus: _propTypes[\"default\"].func,\n  onInput: _propTypes[\"default\"].func,\n  onBlur: _propTypes[\"default\"].func,\n  onScroll: _propTypes[\"default\"].func,\n  value: _propTypes[\"default\"].string,\n  defaultValue: _propTypes[\"default\"].string,\n  onLoad: _propTypes[\"default\"].func,\n  onSelectionChange: _propTypes[\"default\"].func,\n  onCursorChange: _propTypes[\"default\"].func,\n  onBeforeLoad: _propTypes[\"default\"].func,\n  onValidate: _propTypes[\"default\"].func,\n  minLines: _propTypes[\"default\"].number,\n  maxLines: _propTypes[\"default\"].number,\n  readOnly: _propTypes[\"default\"].bool,\n  highlightActiveLine: _propTypes[\"default\"].bool,\n  tabSize: _propTypes[\"default\"].number,\n  showPrintMargin: _propTypes[\"default\"].bool,\n  cursorStart: _propTypes[\"default\"].number,\n  debounceChangePeriod: _propTypes[\"default\"].number,\n  editorProps: _propTypes[\"default\"].object,\n  setOptions: _propTypes[\"default\"].object,\n  style: _propTypes[\"default\"].object,\n  scrollMargin: _propTypes[\"default\"].array,\n  annotations: _propTypes[\"default\"].array,\n  markers: _propTypes[\"default\"].array,\n  keyboardHandler: _propTypes[\"default\"].string,\n  wrapEnabled: _propTypes[\"default\"].bool,\n  enableBasicAutocompletion: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].bool, _propTypes[\"default\"].array]),\n  enableLiveAutocompletion: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].bool, _propTypes[\"default\"].array]),\n  navigateToFileEnd: _propTypes[\"default\"].bool,\n  commands: _propTypes[\"default\"].array,\n  placeholder: _propTypes[\"default\"].string\n};\nReactAce.defaultProps = {\n  name: \"brace-editor\",\n  focus: false,\n  mode: \"\",\n  theme: \"\",\n  height: \"500px\",\n  width: \"500px\",\n  value: \"\",\n  fontSize: 12,\n  showGutter: true,\n  onChange: null,\n  onPaste: null,\n  onLoad: null,\n  onScroll: null,\n  minLines: null,\n  maxLines: null,\n  readOnly: false,\n  highlightActiveLine: true,\n  showPrintMargin: true,\n  tabSize: 4,\n  cursorStart: 1,\n  editorProps: {},\n  style: {},\n  scrollMargin: [0, 0, 0, 0],\n  setOptions: {},\n  wrapEnabled: false,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: false,\n  placeholder: null,\n  navigateToFileEnd: true\n};","map":null,"metadata":{},"sourceType":"script"}