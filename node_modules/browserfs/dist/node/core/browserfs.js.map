{"version":3,"file":"browserfs.js","sourceRoot":"","sources":["../../../src/core/browserfs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * BrowserFS's main module. This is exposed in the browser via the BrowserFS global.\n * Due to limitations in typedoc, we document these functions in ./typedoc.ts.\n */\n\nimport * as buffer from 'buffer';\nimport fs from './node_fs';\nimport * as path from 'path';\nimport {FileSystemConstructor, FileSystem, BFSOneArgCallback, BFSCallback} from './file_system';\nimport EmscriptenFS from '../generic/emscripten_fs';\nimport Backends from './backends';\nimport * as BFSUtils from './util';\nimport * as Errors from './api_error';\nimport setImmediate from '../generic/setImmediate';\n\nif ((<any> process)['initializeTTYs']) {\n  (<any> process)['initializeTTYs']();\n}\n\n/**\n * Installs BFSRequire as global `require`, a Node Buffer polyfill as the global `Buffer` variable,\n * and a Node process polyfill as the global `process` variable.\n */\nexport function install(obj: any) {\n  obj.Buffer = Buffer;\n  obj.process = process;\n  const oldRequire = obj.require ? obj.require : null;\n  // Monkey-patch require for Node-style code.\n  obj.require = function(arg: string) {\n    const rv = BFSRequire(arg);\n    if (!rv) {\n      return oldRequire.apply(null, Array.prototype.slice.call(arguments, 0));\n    } else {\n      return rv;\n    }\n  };\n}\n\n/**\n * @hidden\n */\nexport function registerFileSystem(name: string, fs: FileSystemConstructor) {\n  (<any> Backends)[name] = fs;\n}\n\n/**\n * Polyfill for CommonJS `require()`. For example, can call `BFSRequire('fs')` to get a 'fs' module polyfill.\n */\nexport function BFSRequire(module: 'fs'): typeof fs;\nexport function BFSRequire(module: 'path'): typeof path;\nexport function BFSRequire(module: 'buffer'): typeof buffer;\nexport function BFSRequire(module: 'process'): typeof process;\nexport function BFSRequire(module: 'bfs_utils'): typeof BFSUtils;\nexport function BFSRequire(module: string): any;\nexport function BFSRequire(module: string): any {\n  switch (module) {\n    case 'fs':\n      return fs;\n    case 'path':\n      return path;\n    case 'buffer':\n      // The 'buffer' module has 'Buffer' as a property.\n      return buffer;\n    case 'process':\n      return process;\n    case 'bfs_utils':\n      return BFSUtils;\n    default:\n      return (<any> Backends)[module];\n  }\n}\n\n/**\n * Initializes BrowserFS with the given root file system.\n */\nexport function initialize(rootfs: FileSystem) {\n  return fs.initialize(rootfs);\n}\n\n/**\n * Creates a file system with the given configuration, and initializes BrowserFS with it.\n * See the FileSystemConfiguration type for more info on the configuration object.\n */\nexport function configure(config: FileSystemConfiguration, cb: BFSOneArgCallback): void {\n  getFileSystem(config, (e, fs?) => {\n    if (fs) {\n      initialize(fs);\n      cb();\n    } else {\n      cb(e);\n    }\n  });\n}\n\n/**\n * Specifies a file system backend type and its options.\n *\n * Individual options can recursively contain FileSystemConfiguration objects for\n * option values that require file systems.\n *\n * For example, to mirror Dropbox to LocalStorage with AsyncMirror, use the following\n * object:\n *\n * ```javascript\n * var config = {\n *   fs: \"AsyncMirror\",\n *   options: {\n *     sync: {fs: \"LocalStorage\"},\n *     async: {fs: \"Dropbox\", options: {client: anAuthenticatedDropboxSDKClient }}\n *   }\n * };\n * ```\n *\n * The option object for each file system corresponds to that file system's option object passed to its `Create()` method.\n */\nexport interface FileSystemConfiguration {\n  fs: string;\n  options: any;\n}\n\n/**\n * Retrieve a file system with the given configuration.\n * @param config A FileSystemConfiguration object. See FileSystemConfiguration for details.\n * @param cb Called when the file system is constructed, or when an error occurs.\n */\nexport function getFileSystem(config: FileSystemConfiguration, cb: BFSCallback<FileSystem>): void {\n  const fsName = config['fs'];\n  if (!fsName) {\n    return cb(new Errors.ApiError(Errors.ErrorCode.EPERM, 'Missing \"fs\" property on configuration object.'));\n  }\n  const options = config['options'];\n  let waitCount = 0;\n  let called = false;\n  function finish() {\n    if (!called) {\n      called = true;\n      const fsc = <FileSystemConstructor | undefined> (<any> Backends)[fsName];\n      if (!fsc) {\n        cb(new Errors.ApiError(Errors.ErrorCode.EPERM, `File system ${fsName} is not available in BrowserFS.`));\n      } else {\n        fsc.Create(options, cb);\n      }\n    }\n  }\n\n  if (options !== null && typeof(options) === \"object\") {\n    let finishedIterating = false;\n    const props = Object.keys(options).filter((k) => k !== 'fs');\n\n    // Check recursively if other fields have 'fs' properties.\n    props.forEach((p) => {\n      const d = options[p];\n      if (d !== null && typeof(d) === \"object\" && d['fs']) {\n        waitCount++;\n        getFileSystem(d, function(e, fs?) {\n          waitCount--;\n          if (e) {\n            if (called) {\n              return;\n            }\n            called = true;\n            cb(e);\n          } else {\n            options[p] = fs;\n            if (waitCount === 0 && finishedIterating) {\n              finish();\n            }\n          }\n        });\n      }\n    });\n    finishedIterating = true;\n  }\n  if (waitCount === 0) {\n    finish();\n  }\n}\n\nexport {EmscriptenFS, Backends as FileSystem, Errors, setImmediate};\n"]}