{"version":3,"file":"backends.js","sourceRoot":"","sources":["../../../src/core/backends.ts"],"names":[],"mappings":";AAEA,+BAAoC;AACpC,sDAAiD;AACjD,8CAAyC;AACzC,oDAA+C;AAC/C,0DAAqD;AACrD,8CAAyC;AACzC,gDAA2C;AAC3C,kDAA6C;AAC7C,wDAAmD;AACnD,sEAAiE;AACjE,kDAA6C;AAC7C,gDAA2C;AAC3C,4DAAuD;AACvD,0CAAqC;AACrC,0CAAqC;AAErC,sFAAsF;AACtF,CAAC,wBAAW,EAAE,oBAAO,EAAE,uBAAU,EAAE,0BAAa,EAAE,oBAAO,EAAE,qBAAQ,EAAE,sBAAS,EAAE,kBAAK,EAAE,yBAAY,EAAE,gCAAmB,EAAE,sBAAS,EAAE,qBAAQ,EAAE,2BAAc,EAAE,kBAAK,CAAC,CAAC,OAAO,CAAC,UAAC,MAA6B;IAC1M,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC7B,MAAM,CAAC,MAAM,GAAG,UAAS,IAAU,EAAE,EAA4B;QAC/D,IAAM,MAAM,GAAG,OAAM,CAAC,IAAI,CAAC,KAAK,UAAU,CAAC;QAC3C,IAAM,YAAY,GAAG,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;QACxC,IAAM,cAAc,GAAG,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC;QAE1C,mBAAmB,CAAY;YAC7B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACN,YAAY,CAAC,CAAC,CAAC,CAAC;YAClB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;YACpD,CAAC;QACH,CAAC;QAED,mBAAY,CAAC,MAAM,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;IAClD,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH;;GAEG;AACH,IAAM,QAAQ,GAAG,EAAE,WAAW,0BAAA,EAAE,OAAO,sBAAA,EAAE,UAAU,yBAAA,EAAE,aAAa,4BAAA,EAAE,OAAO,sBAAA,EAAE,QAAQ,uBAAA,EAAE,SAAS,wBAAA,EAAE,KAAK,oBAAA,EAAE,YAAY,2BAAA,EAAE,mBAAmB,kCAAA,EAAE,SAAS,wBAAA,EAAE,QAAQ,uBAAA,EAAE,cAAc,6BAAA,EAAE,KAAK,oBAAA,EAAE,CAAC;AACzL,2EAA2E;AAC3E,IAAM,CAAC,GAA4C,QAAQ,CAAC;AAC5D,gDAAgD;AAChD,CAAC,CAAC;AACF,+CAA+C;AAC/C,qBAAe,QAAQ,CAAC","sourcesContent":["import {FileSystemConstructor, BFSCallback, FileSystem} from './file_system';\nimport {ApiError} from './api_error';\nimport {checkOptions} from './util';\nimport AsyncMirror from '../backend/AsyncMirror';\nimport Dropbox from '../backend/Dropbox';\nimport Emscripten from '../backend/Emscripten';\nimport FolderAdapter from '../backend/FolderAdapter';\nimport HTML5FS from '../backend/HTML5FS';\nimport InMemory from '../backend/InMemory';\nimport IndexedDB from '../backend/IndexedDB';\nimport LocalStorage from '../backend/LocalStorage';\nimport MountableFileSystem from '../backend/MountableFileSystem';\nimport OverlayFS from '../backend/OverlayFS';\nimport WorkerFS from '../backend/WorkerFS';\nimport XmlHttpRequest from '../backend/XmlHttpRequest';\nimport ZipFS from '../backend/ZipFS';\nimport IsoFS from '../backend/IsoFS';\n\n// Monkey-patch `Create` functions to check options before file system initialization.\n[AsyncMirror, Dropbox, Emscripten, FolderAdapter, HTML5FS, InMemory, IndexedDB, IsoFS, LocalStorage, MountableFileSystem, OverlayFS, WorkerFS, XmlHttpRequest, ZipFS].forEach((fsType: FileSystemConstructor) => {\n  const create = fsType.Create;\n  fsType.Create = function(opts?: any, cb?: BFSCallback<FileSystem>): void {\n    const oneArg = typeof(opts) === \"function\";\n    const normalizedCb = oneArg ? opts : cb;\n    const normalizedOpts = oneArg ? {} : opts;\n\n    function wrappedCb(e?: ApiError): void {\n      if (e) {\n        normalizedCb(e);\n      } else {\n        create.call(fsType, normalizedOpts, normalizedCb);\n      }\n    }\n\n    checkOptions(fsType, normalizedOpts, wrappedCb);\n  };\n});\n\n/**\n * @hidden\n */\nconst Backends = { AsyncMirror, Dropbox, Emscripten, FolderAdapter, HTML5FS, InMemory, IndexedDB, IsoFS, LocalStorage, MountableFileSystem, OverlayFS, WorkerFS, XmlHttpRequest, ZipFS };\n// Make sure all backends cast to FileSystemConstructor (for type checking)\nconst _: {[name: string]: FileSystemConstructor} = Backends;\n// tslint:disable-next-line:no-unused-expression\n_;\n// tslint:enable-next-line:no-unused-expression\nexport default Backends;\n"]}