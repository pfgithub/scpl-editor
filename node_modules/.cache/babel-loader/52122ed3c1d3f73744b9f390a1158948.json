{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar WFParameter_1 = require(\"./WFParameter\");\n\nvar WFExpandingParameter =\n/*#__PURE__*/\nfunction (_WFParameter_1$WFPara) {\n  _inherits(WFExpandingParameter, _WFParameter_1$WFPara);\n\n  function WFExpandingParameter(data) {\n    var _this;\n\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Expand Arrow\";\n    var docs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"https://pfgithub.github.io/shortcutslang/gettingstarted#switch-or-expanding-or-boolean-fields\";\n\n    _classCallCheck(this, WFExpandingParameter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WFExpandingParameter).call(this, data, name, docs));\n    _this.allowsVariables = false;\n    return _this;\n  }\n\n  _createClass(WFExpandingParameter, [{\n    key: \"genDocsArgName\",\n    value: function genDocsArgName() {\n      return \"(true | false)\";\n    }\n  }, {\n    key: \"genDocs\",\n    value: function genDocs() {\n      return \"\".concat(_get(_getPrototypeOf(WFExpandingParameter.prototype), \"genDocs\", this).call(this), \"\\n\\nAccepts a boolean for if this\\nparameter is expanded or not.\\nOften expanding fields will\\nenable or disable other\\narguments. If you are using\\nlabels, these can be ignored.\");\n    }\n  }, {\n    key: \"build\",\n    value: function build(cc, parse) {\n      if (parse.canBeBoolean(cc)) {\n        return parse.asBoolean(cc);\n      }\n\n      throw parse.error(cc, \"Expanding fields only accept booleans (true/false).\");\n    }\n  }]);\n\n  return WFExpandingParameter;\n}(WFParameter_1.WFParameter);\n\nexports.WFExpandingParameter = WFExpandingParameter;","map":null,"metadata":{},"sourceType":"script"}