{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Types_1 = require(\"../WFTypes/Types\");\n\nvar GetTypes_1 = require(\"../Data/GetTypes\");\n\nvar WFParameter_1 = require(\"./WFParameter\");\n\nvar WFFilterParameter =\n/*#__PURE__*/\nfunction (_WFParameter_1$WFPara) {\n  _inherits(WFFilterParameter, _WFParameter_1$WFPara);\n\n  function WFFilterParameter(data) {\n    var _this;\n\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Filter\";\n    var docs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"https://pfgithub.github.io/shortcutslang/gettingstarted#filter-field\";\n\n    _classCallCheck(this, WFFilterParameter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WFFilterParameter).call(this, data, name, docs));\n    _this.allowsVariables = false;\n\n    if (!Types_1.isCoercionTypeClass(_this._data.ContentItemClass)) {\n      //eslint-disable-next-line\n      console.warn(\"WARNING! A filter uses a coercion type class that is not supported!\", _this._data.ContentItemClass);\n    }\n\n    _this.coercionType = _this._data.ContentItemClass;\n    return _this;\n  }\n\n  _createClass(WFFilterParameter, [{\n    key: \"genDocsArgName\",\n    value: function genDocsArgName() {\n      return \":filter{...}\";\n    }\n  }, {\n    key: \"genDocs\",\n    value: function genDocs() {\n      var _this2 = this;\n\n      GetTypes_1.default[this.coercionType];\n      return \"\".concat(_get(_getPrototypeOf(WFFilterParameter.prototype), \"genDocs\", this).call(this), \"\\n\\nAccepts a :filter{} of filters. This filter supports:\\n\\n- \").concat(Object.keys(GetTypes_1.default[this.coercionType].properties).map(function (key) {\n        var val = GetTypes_1.default[_this2.coercionType].properties[key];\n\n        if (!val) {\n          return;\n        }\n\n        if (val.filter === false) {\n          return;\n        }\n\n        if (!val.filter) {\n          return \"~~\".concat(key, \"~~ (Not yet supported. [Submit an Issue](https://github.com/pfgithub/shortcutslang/issues/new?title=\").concat(encodeURIComponent(\"Add support for :filter{\".concat(key, \"} (in \").concat(_this2.coercionType, \")\")).split(\"(\").join(\"%28\").split(\")\").join(\"%29\"), \"))\");\n        }\n\n        if (!val.type) {\n          return \"~~\".concat(key, \"~~ (Not yet supported, type is undefined but filter is defined. [Submit an Issue](https://github.com/pfgithub/shortcutslang/issues/new?title=\").concat(encodeURIComponent(\"Type is undefined but filter is defined in :filter{\".concat(key, \"} (in \").concat(_this2.coercionType, \")\")).split(\"(\").join(\"%28\").split(\")\").join(\"%29\"), \"))\");\n        }\n\n        var itemType = GetTypes_1.default[val.type];\n\n        if (!itemType.comparisonMethods) {\n          return \"~~\".concat(key, \"~~ (Not yet supported, no comparison methods defined. [Submit an Issue](https://github.com/pfgithub/shortcutslang/issues/new?title=\").concat(encodeURIComponent(\"Add :filter support for \".concat(val.type)).split(\"(\").join(\"%28\").split(\")\").join(\"%29\"), \"))\");\n        }\n\n        if (val.filterEnumValues) {\n          return \"\".concat(key, \" (Supported for \").concat(Object.keys(itemType.comparisonMethods).join(\", \"), \") (Must be one of: `\").concat(val.filterEnumValues.join(\"`, `\"), \")`\");\n        }\n\n        return \"\".concat(key, \" (Supported for \").concat(Object.keys(itemType.comparisonMethods).join(\", \"), \")\");\n      }).join(\"\\n- \"), \".\\n\\t\\t\\t\\nExample: `:filter{name is testname}`\");\n    }\n  }, {\n    key: \"build\",\n    value: function build(cc, parse) {\n      if (parse.canBeFilter(cc)) {\n        return parse.asFilter(cc, this._data.ContentItemClass);\n      }\n\n      throw parse.error(cc, \"Filter fields only accept filters (:filter {})\");\n    }\n  }]);\n\n  return WFFilterParameter;\n}(WFParameter_1.WFParameter);\n\nexports.WFFilterParameter = WFFilterParameter;","map":null,"metadata":{},"sourceType":"script"}