{"ast":null,"code":"\"use strict\"; // accepts AsAble[] and array of arg names in positions\n// -> cb(argname, argvalue)\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ActionData_1 = require(\"./ActionData\");\n\nfunction simpleParse(cc, names, args) {\n  var res = {};\n  ArgParser(names.map(function (n) {\n    return {\n      name: n,\n      data: undefined\n    };\n  }), function (arg, value) {\n    res[arg.name] = value;\n  }, function (value) {\n    throw value.error(cc, \"InputArg is not allowed for this function\");\n  }, function (arg, value) {\n    return true;\n  }, {\n    args: args,\n    cc: cc\n  });\n  return res;\n}\n\nexports.simpleParse = simpleParse;\n\nfunction ArgParser(argnames, cb, inputarg, shouldEnable, data) {\n  var cc = data.cc;\n  var parami = 0;\n  var setArgs = [];\n  data.args.forEach(function (param) {\n    if (param.special === \"InputArg\") {\n      if (!param.canBeAction(cc)) {\n        throw param.error(cc, \"InputArg fields only accept actions and variables.\");\n      }\n\n      inputarg(param);\n      return;\n    }\n\n    if (param.special === \"Arglist\") {\n      if (!param.canBeRawKeyedDictionary(cc)) {\n        throw param.error(cc, \"ArgList fields only accept dictionaries.\");\n      }\n\n      var dictionary = param.asRawKeyedDictionary(cc);\n      Object.keys(dictionary).forEach(function (key_) {\n        var key = ActionData_1.genShortName(key_);\n        var value = dictionary[key_];\n        var foundData = argnames.find(function (an) {\n          return an.name === key;\n        });\n\n        if (!foundData) {\n          throw value.error(cc, \"No argument exists with the name `\".concat(key, \"`. Arguments are: \").concat(argnames.map(function (an) {\n            return an.name;\n          }).join(\", \")));\n        }\n\n        if (setArgs.indexOf(key) > -1) {\n          throw value.error(cc, \"The argument `\".concat(key, \"` has already been set for this function.\"));\n        }\n\n        setArgs.push(key);\n        cb(foundData, value);\n      });\n      return;\n    }\n\n    var paramname;\n\n    while (!paramname) {\n      paramname = argnames[parami];\n\n      if (!paramname) {\n        throw param.error(cc, \"This action does not have any more arguments. Arguments are: \".concat(argnames.map(function (an) {\n          return an.name;\n        }).join(\", \")));\n      }\n\n      if (setArgs.indexOf(paramname.name) > -1) {\n        paramname = undefined;\n        parami++;\n        continue;\n      }\n\n      setArgs.push(paramname.name);\n\n      if (!shouldEnable(paramname, param)) {\n        paramname = undefined;\n        parami++;\n        continue;\n      }\n\n      parami++;\n    }\n\n    cb(paramname, param);\n  });\n}\n\nexports.ArgParser = ArgParser;","map":null,"metadata":{},"sourceType":"script"}