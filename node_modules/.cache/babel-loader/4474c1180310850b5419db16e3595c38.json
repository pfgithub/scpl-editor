{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar uuidv4 = require(\"uuid/v4\");\n\nvar OutputData_1 = require(\"./OutputData\");\n\nvar PreprocessorActions_1 = require(\"./PreprocessorActions\");\n\nvar ConvertingContext =\n/*#__PURE__*/\nfunction () {\n  function ConvertingContext(above) {\n    _classCallCheck(this, ConvertingContext);\n\n    this.namedVariables = {};\n    this.magicVariables = {};\n    this.parserVariables = {};\n    this.parserActions = {};\n    this.shortcut = new OutputData_1.Shortcut(\"My Great Shortcut\");\n    this.lastVariableAction = undefined; ///\n\n    this.controlFlowStack = [];\n    this.useWarnings = false;\n    this.warnings = [];\n    this.above = above;\n  }\n\n  _createClass(ConvertingContext, [{\n    key: \"getNamedVariable\",\n    value: function getNamedVariable(name) {\n      // if this doesn't have it try this.above\n      if (this.namedVariables[name]) {\n        return this.namedVariables[name];\n      }\n\n      if (this.above) {\n        return this.above.getNamedVariable(name);\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"setNamedVariable\",\n    value: function setNamedVariable(name) {\n      // go to the highest this.above and set it there, named variables are global\n      if (this.above) {\n        return this.above.setNamedVariable(name);\n      }\n\n      this.namedVariables[name] = true;\n    }\n  }, {\n    key: \"getMagicVariable\",\n    value: function getMagicVariable(name) {\n      // if this doesn't have it try this.above\n      if (this.magicVariables[name]) {\n        return this.magicVariables[name];\n      }\n\n      if (this.above) {\n        return this.above.getMagicVariable(name);\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"setMagicVariable\",\n    value: function setMagicVariable(name, action) {\n      // set this's magicVariable[name] to {action:action}\n      this.magicVariables[name] = {\n        action: action\n      };\n    }\n  }, {\n    key: \"getParserVariable\",\n    value: function getParserVariable(name) {\n      if (this.parserVariables[name]) {\n        return this.parserVariables[name];\n      }\n\n      if (this.above) {\n        return this.above.getParserVariable(name);\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"setParserVariable\",\n    value: function setParserVariable(name, value) {\n      this.parserVariables[name] = value;\n    }\n  }, {\n    key: \"getParserAction\",\n    value: function getParserAction(name) {\n      if (PreprocessorActions_1.default[name]) {\n        return PreprocessorActions_1.default[name];\n      }\n\n      if (this.parserActions[name]) {\n        return this.parserActions[name];\n      }\n\n      if (this.above) {\n        return this.above.getParserAction(name);\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"setParserAction\",\n    value: function setParserAction(name, value) {\n      this.parserActions[name] = value;\n    }\n  }, {\n    key: \"in\",\n    value: function _in() {\n      return new ConvertingContext(this);\n    }\n  }, {\n    key: \"peekControlFlow\",\n    value: function peekControlFlow() {\n      return this.controlFlowStack[this.controlFlowStack.length - 1];\n    }\n  }, {\n    key: \"pushControlFlow\",\n    value: function pushControlFlow() {\n      for (var _len = arguments.length, actions = new Array(_len), _key = 0; _key < _len; _key++) {\n        actions[_key] = arguments[_key];\n      }\n\n      var res = actions.map(function (wfaction) {\n        return {\n          uuid: uuidv4(),\n          number: 0,\n          wfaction: wfaction\n        };\n      });\n      this.controlFlowStack.push(res);\n      return res;\n    }\n  }, {\n    key: \"nextControlFlow\",\n    value: function nextControlFlow() {\n      // if this doesn't have it, too bad.\n      // controlflow does not go up.\n      var last = this.peekControlFlow();\n\n      if (!last) {\n        return undefined;\n      }\n\n      last[last.length - 1].number = 1;\n      return last;\n    }\n  }, {\n    key: \"endControlFlow\",\n    value: function endControlFlow() {\n      var last = this.controlFlowStack.pop();\n\n      if (!last) {\n        return undefined;\n      }\n\n      last.forEach(function (item) {\n        return item.number = 2;\n      });\n      return last;\n    }\n  }, {\n    key: \"add\",\n    value: function add(action) {\n      // add an action to the highest cc\n      if (this.above) {\n        return this.above.add(action);\n      }\n\n      this.shortcut.add(action);\n      this.lastVariableAction = action;\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(positionedError) {\n      if (this.useWarnings) {\n        this.warnings.push(positionedError);\n      } else {\n        positionedError.message = positionedError.message.replace(\"Error from\", \"Warning from\");\n        throw positionedError;\n      }\n    }\n  }]);\n\n  return ConvertingContext;\n}();\n\nexports.ConvertingContext = ConvertingContext;","map":null,"metadata":{},"sourceType":"script"}