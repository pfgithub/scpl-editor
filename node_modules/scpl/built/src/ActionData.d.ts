import { Action } from "./OutputData";
import { ConvertingContext } from "./Converter";
import { AsAble } from "./ParserData";
export declare function genShortName(longName: string, internalName?: string, allowUppercase?: boolean): string;
import { WFParameter } from "./Parameters/WFParameter";
export declare class WFAction {
    _data: any;
    id: string;
    isComplete: boolean;
    _parameters: Array<WFParameter | string>;
    internalName: string;
    shortName: string;
    name: string;
    readableName: string;
    constructor(data: any, id: string);
    readonly actionOutputType: any;
    readonly inputPassthrough: any;
    readonly hasVariable: boolean;
    readonly requiresInput: boolean;
    genDocsParams(): ({
        argType: string;
        argName?: undefined;
        argAutocompletePlaceholder?: undefined;
    } | {
        argName: string;
        argType: string;
        argAutocompletePlaceholder: string;
    })[];
    genDocsAutocompleteUsage(): string;
    genDocsUsage(): string;
    genDocs(): string;
    getParameters(): {
        [key: string]: WFParameter;
    };
    getParameterOrder(): (string | WFParameter)[];
    build(cc: ConvertingContext, actionPosition: AsAble, controlFlowData?: {
        uuid: string;
        number: number;
        wfaction: any;
    }, ...params: Array<AsAble>): Action;
}
export declare function genReadme(): string;
export declare function getActionFromID(id: string): WFAction | undefined;
export declare function getActionFromName(name: string): WFAction | undefined;
export declare const allActions: WFAction[];
export declare const WFTypes: {
    [key: string]: any;
};
