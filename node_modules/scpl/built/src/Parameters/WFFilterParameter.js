"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Types_1 = require("../WFTypes/Types");
const GetTypes_1 = require("../Data/GetTypes");
const WFParameter_1 = require("./WFParameter");
class WFFilterParameter extends WFParameter_1.WFParameter {
    constructor(data, name = "Filter", docs = "https://pfgithub.github.io/shortcutslang/gettingstarted#filter-field") {
        super(data, name, docs);
        this.allowsVariables = false;
        if (!Types_1.isCoercionTypeClass(this._data.ContentItemClass)) {
            //eslint-disable-next-line
            console.warn("WARNING! A filter uses a coercion type class that is not supported!", this._data.ContentItemClass);
        }
        this.coercionType = this._data.ContentItemClass;
    }
    genDocsArgName() {
        return `:filter{...}`;
    }
    genDocs() {
        GetTypes_1.default[this.coercionType];
        return `${super.genDocs()}

Accepts a :filter{} of filters. This filter supports:

- ${Object.keys(GetTypes_1.default[this.coercionType].properties)
            .map(key => {
            const val = GetTypes_1.default[this.coercionType].properties[key];
            if (!val) {
                return;
            }
            if (val.filter === false) {
                return;
            }
            if (!val.filter) {
                return `~~${key}~~ (Not yet supported. [Submit an Issue](https://github.com/pfgithub/shortcutslang/issues/new?title=${encodeURIComponent(`Add support for :filter{${key}} (in ${this.coercionType})`)
                    .split("(")
                    .join("%28")
                    .split(")")
                    .join("%29")}))`;
            }
            if (!val.type) {
                return `~~${key}~~ (Not yet supported, type is undefined but filter is defined. [Submit an Issue](https://github.com/pfgithub/shortcutslang/issues/new?title=${encodeURIComponent(`Type is undefined but filter is defined in :filter{${key}} (in ${this.coercionType})`)
                    .split("(")
                    .join("%28")
                    .split(")")
                    .join("%29")}))`;
            }
            const itemType = GetTypes_1.default[val.type];
            if (!itemType.comparisonMethods) {
                return `~~${key}~~ (Not yet supported, no comparison methods defined. [Submit an Issue](https://github.com/pfgithub/shortcutslang/issues/new?title=${encodeURIComponent(`Add :filter support for ${val.type}`)
                    .split("(")
                    .join("%28")
                    .split(")")
                    .join("%29")}))`;
            }
            if (val.filterEnumValues) {
                return `${key} (Supported for ${Object.keys(itemType.comparisonMethods).join(", ")}) (Must be one of: \`${val.filterEnumValues.join("`, `")})\``;
            }
            return `${key} (Supported for ${Object.keys(itemType.comparisonMethods).join(", ")})`;
        })
            .join("\n- ")}.
			
Example: \`:filter{name is testname}\``;
    }
    build(cc, parse) {
        if (parse.canBeFilter(cc)) {
            return parse.asFilter(cc, this._data.ContentItemClass);
        }
        throw parse.error(cc, "Filter fields only accept filters (:filter {})");
    }
}
exports.WFFilterParameter = WFFilterParameter;
