"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WFResource_1 = require("../WFResource");
const ActionData_1 = require("../ActionData");
class WFParameter {
    constructor(data, typeName, docs) {
        this._data = data;
        this.defaultValue = this._data.DefaultValue;
        this.requiredResources = this._data.RequiredResources || [];
        this.allowsVariables =
            (this._data.DisallowedVariableTypes || []).join `` !== "AskVariable";
        this.name = this._data.Label;
        this.internalName = this._data.Key;
        this.shortName = ActionData_1.genShortName(this.name, this.internalName);
        this.readableName = ActionData_1.genShortName(this.name, this.internalName, true);
        if (!this.readableName.startsWith("WF")) {
            this.readableName =
                this.readableName.charAt(0).toLowerCase() +
                    this.readableName.slice(1);
        }
        this.name = this.name || this.shortName;
        this.typeName = typeName;
        this.docs = docs;
        this.requiredResources = this.requiredResources.map((resource) => {
            const type = resource.WFResourceClass;
            const resourceClass = WFResource_1.resourceTypes[type];
            if (!resourceClass) {
                throw new Error(`${type} is not a defined resource class.`);
            }
            // @ts-ignore
            return new resourceClass(resource);
        });
        if (this._data.Hidden) {
            this.requiredResources.push(new WFResource_1.WFWorkflowHiddenResource({ Hidden: true }));
        }
    }
    shouldEnable(action) {
        return this.requiredResources.every((resource) => resource.shouldEnable(action));
    }
    genDocsArgName() {
        return "[???]";
    }
    genDocsDefaultValue(value) {
        return `\`\`\`
		${value}
		\`\`\``;
    }
    genDocsAutocompletePlaceholder() {
        return `:${this._data.DefaultValue
            ? `${this.genDocsArgName()}:"${this._data.DefaultValue}"`
            : `${this.genDocsArgName()}`}`;
    }
    genDocs() {
        let docs = `### ${this.readableName}: ${this.typeName} [(Docs)](${this.docs})\n`;
        if (this._data.Placeholder) {
            docs += `**Placeholder**: ${this.genDocsDefaultValue(this._data.Placeholder)}
`;
        }
        if (this._data.DefaultValue) {
            docs += `**Default Value**: ${this.genDocsDefaultValue(this._data.DefaultValue)}
`;
        }
        if (this.allowsVariables) {
            docs += `**Allows Variables**: ${this.allowsVariables}\n\n`;
        }
        docs += `${this.requiredResources
            .map(resource => `**Only enabled if**: ${resource.genDocs()}`)
            .join("\n\n")}`;
        return docs;
    }
    build(cc, parse) {
        throw parse.error(cc, "This parameter was implemented wrong in ScPL. build() should be overridden by subclasses of WFParameter.");
    }
}
exports.WFParameter = WFParameter;
