{"version":3,"file":"MountableFileSystem.js","sourceRoot":"","sources":["../../../src/backend/MountableFileSystem.ts"],"names":[],"mappings":"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","sourcesContent":["import {FileSystem, BaseFileSystem, BFSOneArgCallback, BFSCallback, FileSystemOptions} from '../core/file_system';\nimport InMemoryFileSystem from './InMemory';\nimport {ApiError, ErrorCode} from '../core/api_error';\nimport fs from '../core/node_fs';\nimport * as path from 'path';\nimport {mkdirpSync} from '../core/util';\n\n/**\n * Configuration options for the MountableFileSystem backend.\n */\nexport interface MountableFileSystemOptions {\n  // Locations of mount points. Can be empty.\n  [mountPoint: string]: FileSystem;\n}\n\n/**\n * The MountableFileSystem allows you to mount multiple backend types or\n * multiple instantiations of the same backend into a single file system tree.\n * The file systems do not need to know about each other; all interactions are\n * automatically facilitated through this interface.\n *\n * For example, if a file system is mounted at /mnt/blah, and a request came in\n * for /mnt/blah/foo.txt, the file system would see a request for /foo.txt.\n *\n * You can mount file systems when you configure the file system:\n * ```javascript\n * BrowserFS.configure({\n *   fs: \"MountableFileSystem\",\n *   options: {\n *     '/data': { fs: 'XmlHttpRequest', options: { index: \"http://mysite.com/files/index.json\" } },\n *     '/home': { fs: 'LocalStorage' }\n *   }\n * }, function(e) {\n *\n * });\n * ```\n *\n * For advanced users, you can also mount file systems *after* MFS is constructed:\n * ```javascript\n * BrowserFS.FileSystem.XmlHttpRequest.Create({\n *   index: \"http://mysite.com/files/index.json\"\n * }, function(e, xhrfs) {\n *   BrowserFS.FileSystem.MountableFileSystem.Create({\n *     '/data': xhrfs\n *   }, function(e, mfs) {\n *     BrowserFS.initialize(mfs);\n *\n *     // Added after-the-fact...\n *     BrowserFS.FileSystem.LocalStorage.Create(function(e, lsfs) {\n *       mfs.mount('/home', lsfs);\n *     });\n *   });\n * });\n * ```\n *\n * Since MountableFileSystem simply proxies requests to mounted file systems, it supports all of the operations that the mounted file systems support.\n *\n * With no mounted file systems, `MountableFileSystem` acts as a simple `InMemory` filesystem.\n */\nexport default class MountableFileSystem extends BaseFileSystem implements FileSystem {\n  public static readonly Name = \"MountableFileSystem\";\n\n  public static readonly Options: FileSystemOptions = {};\n\n  /**\n   * Creates a MountableFileSystem instance with the given options.\n   */\n  public static Create(opts: MountableFileSystemOptions, cb: BFSCallback<MountableFileSystem>): void {\n    const fs = new MountableFileSystem();\n    Object.keys(opts).forEach((mountPoint) => {\n      fs.mount(mountPoint, opts[mountPoint]);\n    });\n    cb(null, fs);\n  }\n  public static isAvailable(): boolean {\n    return true;\n  }\n\n  private mntMap: {[path: string]: FileSystem};\n  // Contains the list of mount points in mntMap, sorted by string length in decreasing order.\n  // Ensures that we scan the most specific mount points for a match first, which lets us\n  // nest mount points.\n  private mountList: string[] = [];\n  private rootFs: FileSystem;\n\n  /**\n   * Creates a new, empty MountableFileSystem.\n   */\n  constructor() {\n    super();\n    this.mntMap = {};\n    // The InMemory file system serves purely to provide directory listings for\n    // mounted file systems.\n    this.rootFs = new InMemoryFileSystem();\n  }\n\n  /**\n   * Mounts the file system at the given mount point.\n   */\n  public mount(mountPoint: string, fs: FileSystem): void {\n    if (mountPoint[0] !== '/') {\n      mountPoint = `/${mountPoint}`;\n    }\n    mountPoint = path.resolve(mountPoint);\n    if (this.mntMap[mountPoint]) {\n      throw new ApiError(ErrorCode.EINVAL, \"Mount point \" + mountPoint + \" is already taken.\");\n    }\n    mkdirpSync(mountPoint, 0x1ff, this.rootFs);\n    this.mntMap[mountPoint] = fs;\n    this.mountList.push(mountPoint);\n    this.mountList = this.mountList.sort((a, b) => b.length - a.length);\n  }\n\n  public umount(mountPoint: string): void {\n    if (mountPoint[0] !== '/') {\n      mountPoint = `/${mountPoint}`;\n    }\n    mountPoint = path.resolve(mountPoint);\n    if (!this.mntMap[mountPoint]) {\n      throw new ApiError(ErrorCode.EINVAL, \"Mount point \" + mountPoint + \" is already unmounted.\");\n    }\n    delete this.mntMap[mountPoint];\n    this.mountList.splice(this.mountList.indexOf(mountPoint), 1);\n\n    while (mountPoint !== '/') {\n      if (this.rootFs.readdirSync(mountPoint).length === 0) {\n        this.rootFs.rmdirSync(mountPoint);\n        mountPoint = path.dirname(mountPoint);\n      } else {\n        break;\n      }\n    }\n  }\n\n  /**\n   * Returns the file system that the path points to.\n   */\n  public _getFs(path: string): {fs: FileSystem; path: string} {\n    const mountList = this.mountList, len = mountList.length;\n    for (let i = 0; i < len; i++) {\n      const mountPoint = mountList[i];\n      // We know path is normalized, so it is a substring of the mount point.\n      if (mountPoint.length <= path.length && path.indexOf(mountPoint) === 0) {\n        path = path.substr(mountPoint.length > 1 ? mountPoint.length : 0);\n        if (path === '') {\n          path = '/';\n        }\n        return {fs: this.mntMap[mountPoint], path: path};\n      }\n    }\n    // Query our root file system.\n    return {fs: this.rootFs, path: path};\n  }\n\n  // Global information methods\n\n  public getName(): string {\n    return MountableFileSystem.Name;\n  }\n\n  public diskSpace(path: string, cb: (total: number, free: number) => void): void {\n    cb(0, 0);\n  }\n\n  public isReadOnly(): boolean {\n    return false;\n  }\n\n  public supportsLinks(): boolean {\n    // I'm not ready for cross-FS links yet.\n    return false;\n  }\n\n  public supportsProps(): boolean {\n    return false;\n  }\n\n  public supportsSynch(): boolean {\n    return true;\n  }\n\n  /**\n   * Fixes up error messages so they mention the mounted file location relative\n   * to the MFS root, not to the particular FS's root.\n   * Mutates the input error, and returns it.\n   */\n  public standardizeError(err: ApiError, path: string, realPath: string): ApiError {\n    const index = err.message.indexOf(path);\n    if (index !== -1) {\n      err.message = err.message.substr(0, index) + realPath + err.message.substr(index + path.length);\n      err.path = realPath;\n    }\n    return err;\n  }\n\n  // The following methods involve multiple file systems, and thus have custom\n  // logic.\n  // Note that we go through the Node API to use its robust default argument\n  // processing.\n\n  public rename(oldPath: string, newPath: string, cb: BFSOneArgCallback): void {\n    // Scenario 1: old and new are on same FS.\n    const fs1rv = this._getFs(oldPath);\n    const fs2rv = this._getFs(newPath);\n    if (fs1rv.fs === fs2rv.fs) {\n      return fs1rv.fs.rename(fs1rv.path, fs2rv.path, (e?: ApiError) => {\n        if (e) {\n          this.standardizeError(this.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);\n        }\n        cb(e);\n      });\n    }\n\n    // Scenario 2: Different file systems.\n    // Read old file, write new file, delete old file.\n    return fs.readFile(oldPath, function(err: ApiError, data?: any) {\n      if (err) {\n        return cb(err);\n      }\n      fs.writeFile(newPath, data, function(err: ApiError) {\n        if (err) {\n          return cb(err);\n        }\n        fs.unlink(oldPath, cb);\n      });\n    });\n  }\n\n  public renameSync(oldPath: string, newPath: string): void {\n    // Scenario 1: old and new are on same FS.\n    const fs1rv = this._getFs(oldPath);\n    const fs2rv = this._getFs(newPath);\n    if (fs1rv.fs === fs2rv.fs) {\n      try {\n        return fs1rv.fs.renameSync(fs1rv.path, fs2rv.path);\n      } catch (e) {\n        this.standardizeError(this.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);\n        throw e;\n      }\n    }\n    // Scenario 2: Different file systems.\n    const data = fs.readFileSync(oldPath);\n    fs.writeFileSync(newPath, data);\n    return fs.unlinkSync(oldPath);\n  }\n\n  public readdirSync(p: string): string[] {\n    const fsInfo = this._getFs(p);\n\n    // If null, rootfs did not have the directory\n    // (or the target FS is the root fs).\n    let rv: string[] | null = null;\n    // Mount points are all defined in the root FS.\n    // Ensure that we list those, too.\n    if (fsInfo.fs !== this.rootFs) {\n      try {\n        rv = this.rootFs.readdirSync(p);\n      } catch (e) {\n        // Ignore.\n      }\n    }\n\n    try {\n      const rv2 = fsInfo.fs.readdirSync(fsInfo.path);\n      if (rv === null) {\n        return rv2;\n      } else {\n        // Filter out duplicates.\n        return rv2.concat(rv.filter((val) => rv2.indexOf(val) === -1));\n      }\n    } catch (e) {\n      if (rv === null) {\n        throw this.standardizeError(e, fsInfo.path, p);\n      } else {\n        // The root FS had something.\n        return rv;\n      }\n    }\n  }\n\n  public readdir(p: string, cb: BFSCallback<string[]>): void {\n    const fsInfo = this._getFs(p);\n    fsInfo.fs.readdir(fsInfo.path, (err, files) => {\n      if (fsInfo.fs !== this.rootFs) {\n        try {\n          const rv = this.rootFs.readdirSync(p);\n          if (files) {\n            // Filter out duplicates.\n            files = files.concat(rv.filter((val) => files!.indexOf(val) === -1));\n          } else {\n            files = rv;\n          }\n        } catch (e) {\n          // Root FS and target FS did not have directory.\n          if (err) {\n            return cb(this.standardizeError(err, fsInfo.path, p));\n          }\n        }\n      } else if (err) {\n        // Root FS and target FS are the same, and did not have directory.\n        return cb(this.standardizeError(err, fsInfo.path, p));\n      }\n\n      cb(null, files);\n    });\n  }\n\n  public rmdirSync(p: string): void {\n    const fsInfo = this._getFs(p);\n    if (this._containsMountPt(p)) {\n      throw ApiError.ENOTEMPTY(p);\n    } else {\n      try {\n        fsInfo.fs.rmdirSync(fsInfo.path);\n      } catch (e) {\n        throw this.standardizeError(e, fsInfo.path, p);\n      }\n    }\n  }\n\n  public rmdir(p: string, cb: BFSOneArgCallback): void {\n    const fsInfo = this._getFs(p);\n    if (this._containsMountPt(p)) {\n      cb(ApiError.ENOTEMPTY(p));\n    } else {\n      fsInfo.fs.rmdir(fsInfo.path, (err?) => {\n        cb(err ? this.standardizeError(err, fsInfo.path, p) : null);\n      });\n    }\n  }\n\n  /**\n   * Returns true if the given path contains a mount point.\n   */\n  private _containsMountPt(p: string): boolean {\n    const mountPoints = this.mountList, len = mountPoints.length;\n    for (let i = 0; i < len; i++) {\n      const pt = mountPoints[i];\n      if (pt.length >= p.length && pt.slice(0, p.length) === p) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Tricky: Define all of the functions that merely forward arguments to the\n * relevant file system, or return/throw an error.\n * Take advantage of the fact that the *first* argument is always the path, and\n * the *last* is the callback function (if async).\n * @todo Can use numArgs to make proxying more efficient.\n * @hidden\n */\nfunction defineFcn(name: string, isSync: boolean, numArgs: number): (...args: any[]) => any {\n  if (isSync) {\n    return function(this: MountableFileSystem, ...args: any[]) {\n      const path = args[0];\n      const rv = this._getFs(path);\n      args[0] = rv.path;\n      try {\n        return (<any> rv.fs)[name].apply(rv.fs, args);\n      } catch (e) {\n        this.standardizeError(e, rv.path, path);\n        throw e;\n      }\n    };\n  } else {\n    return function(this: MountableFileSystem, ...args: any[]) {\n      const path = args[0];\n      const rv = this._getFs(path);\n      args[0] = rv.path;\n      if (typeof args[args.length - 1] === 'function') {\n        const cb = args[args.length - 1];\n        args[args.length - 1] = (...args: any[]) => {\n          if (args.length > 0 && args[0] instanceof ApiError) {\n            this.standardizeError(args[0], rv.path, path);\n          }\n          cb.apply(null, args);\n        };\n      }\n      return (<any> rv.fs)[name].apply(rv.fs, args);\n    };\n  }\n}\n\n/**\n * @hidden\n */\nconst fsCmdMap = [\n   // 1 arg functions\n   ['exists', 'unlink', 'readlink'],\n   // 2 arg functions\n   ['stat', 'mkdir', 'realpath', 'truncate'],\n   // 3 arg functions\n   ['open', 'readFile', 'chmod', 'utimes'],\n   // 4 arg functions\n   ['chown'],\n   // 5 arg functions\n   ['writeFile', 'appendFile']];\n\nfor (let i = 0; i < fsCmdMap.length; i++) {\n  const cmds = fsCmdMap[i];\n  for (const fnName of cmds) {\n    (<any> MountableFileSystem.prototype)[fnName] = defineFcn(fnName, false, i + 1);\n    (<any> MountableFileSystem.prototype)[fnName + 'Sync'] = defineFcn(fnName + 'Sync', true, i + 1);\n  }\n}\n"]}