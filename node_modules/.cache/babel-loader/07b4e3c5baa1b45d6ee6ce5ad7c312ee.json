{"ast":null,"code":"import _regeneratorRuntime from \"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar delay = function delay(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n};\n\nexport var FileManagerClass =\n/*#__PURE__*/\nfunction () {\n  function FileManagerClass() {\n    _classCallCheck(this, FileManagerClass);\n\n    this.files = void 0;\n    this.fileList = void 0;\n    this.onFileListChange = void 0;\n    this.onActiveFileChanged = void 0;\n    this.tabs = void 0;\n    this.files = {};\n    this.fileList = [];\n\n    this.onFileListChange = function () {};\n\n    this.onActiveFileChanged = function () {};\n\n    this.tabs = [];\n  }\n\n  _createClass(FileManagerClass, [{\n    key: \"newID\",\n    value: function newID() {\n      var uintarr = new Uint8Array(20);\n      crypto.getRandomValues(uintarr);\n      var id = new Buffer(uintarr).toString(\"hex\");\n      return id;\n    }\n  }, {\n    key: \"createFile\",\n    value: function () {\n      var _createFile = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(cont, name, id) {\n        var fileListEntry;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.files[id] = {\n                  cont: cont,\n                  name: name\n                };\n                fileListEntry = {\n                  id: id,\n                  name: name,\n                  loading: true\n                };\n                this.fileList.push(fileListEntry);\n                this.onFileListChange(); // tell server about the file\n\n                _context.next = 6;\n                return delay(1000);\n\n              case 6:\n                fileListEntry.loading = false;\n                this.onFileListChange();\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createFile(_x, _x2, _x3) {\n        return _createFile.apply(this, arguments);\n      }\n\n      return createFile;\n    }()\n  }, {\n    key: \"renameFile\",\n    value: function () {\n      var _renameFile = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id, name) {\n        var fileListEntry, fileValueEntry;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                fileListEntry = this.fileList.find(function (file) {\n                  return file.id === id;\n                });\n\n                if (fileListEntry) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw new Error(\"File with id \".concat(id, \" has no list entry.\"));\n\n              case 3:\n                fileListEntry.name = name;\n                fileListEntry.loading = true;\n                fileValueEntry = this.files[id];\n\n                if (fileValueEntry) {\n                  fileValueEntry.name = name;\n                }\n\n                this.onFileListChange(); // tell server about file rename\n\n                _context2.next = 10;\n                return delay(1000);\n\n              case 10:\n                fileListEntry.loading = false;\n                this.onFileListChange();\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function renameFile(_x4, _x5) {\n        return _renameFile.apply(this, arguments);\n      }\n\n      return renameFile;\n    }()\n  }, {\n    key: \"saveFile\",\n    value: function () {\n      var _saveFile = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(id, newCont) {\n        var fileListEntry, fileValueEntry;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                fileListEntry = this.fileList.find(function (file) {\n                  return file.id === id;\n                });\n\n                if (fileListEntry) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw new Error(\"File with id \".concat(id, \" has no list entry.\"));\n\n              case 3:\n                fileListEntry.loading = true;\n                fileValueEntry = this.files[id];\n\n                if (fileValueEntry) {\n                  fileValueEntry.cont = newCont;\n                }\n\n                this.onFileListChange(); // tell server about file save\n\n                _context3.next = 9;\n                return delay(1000);\n\n              case 9:\n                fileListEntry.loading = false;\n                this.onFileListChange();\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function saveFile(_x6, _x7) {\n        return _saveFile.apply(this, arguments);\n      }\n\n      return saveFile;\n    }()\n  }, {\n    key: \"loadFile\",\n    value: function () {\n      var _loadFile = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(id) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this.files[id]) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", this.files[id].cont);\n\n              case 2:\n                _context4.next = 4;\n                return delay(1000);\n\n              case 4:\n                throw new Error(\"File with id \".concat(id, \" does not exist.\"));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function loadFile(_x8) {\n        return _loadFile.apply(this, arguments);\n      }\n\n      return loadFile;\n    }()\n  }, {\n    key: \"addTab\",\n    value: function addTab(id) {\n      var _this = this;\n\n      var existingTab = this.tabs.find(function (tab) {\n        return tab.id === id;\n      });\n\n      if (!existingTab) {\n        this.tabs.push({\n          id: id,\n          name: \"...\"\n        });\n      }\n\n      this.tabs.forEach(function (tab) {\n        var fileListEntry = _this.fileList.find(function (file) {\n          return file.id === tab.id;\n        });\n\n        if (!fileListEntry) {\n          tab.name = \"???\";\n          return;\n        }\n\n        tab.name = fileListEntry.name;\n      });\n      this.onFileListChange();\n      this.onActiveFileChanged(id);\n    }\n  }, {\n    key: \"closeTab\",\n    value: function closeTab(id) {\n      var existingTab = this.tabs.findIndex(function (tab) {\n        return tab.id === id;\n      });\n\n      if (existingTab <= -1) {\n        return;\n      }\n\n      var prevTab = this.tabs[existingTab - 1];\n      this.onFileListChange();\n      this.onActiveFileChanged(prevTab ? prevTab.id : undefined);\n    }\n  }]);\n\n  return FileManagerClass;\n}();\nexport var FileManager = new FileManagerClass();","map":{"version":3,"sources":["/Users/brandonjordan/Documents/GitHub/scpl-editor/src/FileManager.ts"],"names":["delay","ms","Promise","resolve","setTimeout","FileManagerClass","files","fileList","onFileListChange","onActiveFileChanged","tabs","uintarr","Uint8Array","crypto","getRandomValues","id","Buffer","toString","cont","name","fileListEntry","loading","push","find","file","Error","fileValueEntry","newCont","existingTab","tab","forEach","findIndex","prevTab","undefined","FileManager"],"mappings":"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","sourcesContent":["const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport class FileManagerClass {\n\tfiles: { [id: string]: { cont: string; name: string } };\n\tfileList: { id: string; name: string; loading: boolean }[];\n\tonFileListChange: () => void;\n\tonActiveFileChanged: (id: string | undefined) => void;\n\ttabs: { id: string; name: string }[];\n\tconstructor() {\n\t\tthis.files = {};\n\t\tthis.fileList = [];\n\t\tthis.onFileListChange = () => {};\n\t\tthis.onActiveFileChanged = () => {};\n\t\tthis.tabs = [];\n\t}\n\tnewID() {\n\t\tconst uintarr = new Uint8Array(20);\n\t\tcrypto.getRandomValues(uintarr);\n\t\tconst id = new Buffer(uintarr).toString(\"hex\");\n\t\treturn id;\n\t}\n\tasync createFile(cont: string, name: string, id: string) {\n\t\tthis.files[id] = { cont, name };\n\t\tconst fileListEntry = { id, name, loading: true };\n\t\tthis.fileList.push(fileListEntry);\n\n\t\tthis.onFileListChange();\n\n\t\t// tell server about the file\n\t\tawait delay(1000);\n\n\t\tfileListEntry.loading = false;\n\t\tthis.onFileListChange();\n\t}\n\tasync renameFile(id: string, name: string) {\n\t\tconst fileListEntry = this.fileList.find(file => file.id === id);\n\t\tif (!fileListEntry) {\n\t\t\tthrow new Error(`File with id ${id} has no list entry.`);\n\t\t}\n\t\tfileListEntry.name = name;\n\t\tfileListEntry.loading = true;\n\n\t\tconst fileValueEntry = this.files[id];\n\t\tif (fileValueEntry) {\n\t\t\tfileValueEntry.name = name;\n\t\t}\n\n\t\tthis.onFileListChange();\n\n\t\t// tell server about file rename\n\t\tawait delay(1000);\n\n\t\tfileListEntry.loading = false;\n\t\tthis.onFileListChange();\n\t}\n\tasync saveFile(id: string, newCont: string) {\n\t\tconst fileListEntry = this.fileList.find(file => file.id === id);\n\t\tif (!fileListEntry) {\n\t\t\tthrow new Error(`File with id ${id} has no list entry.`);\n\t\t}\n\t\tfileListEntry.loading = true;\n\n\t\tconst fileValueEntry = this.files[id];\n\t\tif (fileValueEntry) {\n\t\t\tfileValueEntry.cont = newCont;\n\t\t}\n\n\t\tthis.onFileListChange();\n\n\t\t// tell server about file save\n\t\tawait delay(1000);\n\n\t\tfileListEntry.loading = false;\n\t\tthis.onFileListChange();\n\t}\n\tasync loadFile(id: string): Promise<string> {\n\t\tif (this.files[id]) {\n\t\t\treturn this.files[id].cont;\n\t\t}\n\n\t\tawait delay(1000);\n\n\t\tthrow new Error(`File with id ${id} does not exist.`);\n\t}\n\taddTab(id: string) {\n\t\tconst existingTab = this.tabs.find(tab => tab.id === id);\n\t\tif (!existingTab) {\n\t\t\tthis.tabs.push({ id, name: \"...\" });\n\t\t}\n\t\tthis.tabs.forEach(tab => {\n\t\t\tconst fileListEntry = this.fileList.find(\n\t\t\t\tfile => file.id === tab.id\n\t\t\t);\n\t\t\tif (!fileListEntry) {\n\t\t\t\ttab.name = \"???\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttab.name = fileListEntry.name;\n\t\t});\n\t\tthis.onFileListChange();\n\t\tthis.onActiveFileChanged(id);\n\t}\n\tcloseTab(id: string) {\n\t\tconst existingTab = this.tabs.findIndex(tab => tab.id === id);\n\t\tif (existingTab <= -1) {\n\t\t\treturn;\n\t\t}\n\t\tconst prevTab = this.tabs[existingTab - 1];\n\t\tthis.onFileListChange();\n\t\tthis.onActiveFileChanged(prevTab ? prevTab.id : undefined);\n\t}\n}\n\nexport const FileManager = new FileManagerClass();\n"]},"metadata":{},"sourceType":"module"}