{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar WFParameter_1 = require(\"./WFParameter\");\n\nvar WFEnumerationParameter =\n/*#__PURE__*/\nfunction (_WFParameter_1$WFPara) {\n  _inherits(WFEnumerationParameter, _WFParameter_1$WFPara);\n\n  function WFEnumerationParameter(data) {\n    var _this;\n\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Enumeration\";\n    var docs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"https://pfgithub.github.io/shortcutslang/gettingstarted#enum-select-field\";\n\n    _classCallCheck(this, WFEnumerationParameter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WFEnumerationParameter).call(this, data, name, docs));\n    _this.options = _this._data.Items;\n    return _this;\n  }\n\n  _createClass(WFEnumerationParameter, [{\n    key: \"genDocsAutocompletePlaceholder\",\n    value: function genDocsAutocompletePlaceholder() {\n      return \"|\".concat(this.options.map(function (o) {\n        return \"\\\"\".concat(o, \"\\\"\");\n      }).join(\",\")).concat(this.allowsVariables ? \",variable\" : \"\", \"|\");\n    }\n  }, {\n    key: \"genDocsArgName\",\n    value: function genDocsArgName() {\n      var strInfo = this.options.join('\" | \"');\n      return this.allowsVariables ? \"(\\\"\".concat(strInfo, \"\\\")\") : \"(\\\"\".concat(strInfo, \"\\\" | variable)\");\n    }\n  }, {\n    key: \"genDocsDefaultValue\",\n    value: function genDocsDefaultValue(value) {\n      return \"`\\\"\".concat(value, \"\\\"`\");\n    }\n  }, {\n    key: \"genDocs\",\n    value: function genDocs() {\n      return \"\".concat(_get(_getPrototypeOf(WFEnumerationParameter.prototype), \"genDocs\", this).call(this), \"\\n\\nAccepts a string \").concat(this.allowsVariables ? \"\\nor variable\" : \"\", \"\\ncontaining one of the options:\\n\\n- `\").concat(this.options.join(\"`\\n- `\"), \"`\");\n    }\n  }, {\n    key: \"build\",\n    value: function build(cc, parse) {\n      // asVariable may require additional actions to be inserted above this one.\n      // for example, if ^(\"hello\") (v:comparison) \"hi\"\n      if (parse.canBeVariable(cc)) {\n        var res = parse.asVariable(cc);\n\n        if (!this.allowsVariables) {\n          throw parse.error(cc, \"This enum field does not accept variables.\");\n        }\n\n        return res;\n      } else if (parse.canBeString(cc)) {\n        var _res = parse.asString(cc); // asString returns a string like \"\"\n\n\n        if (this.options.indexOf(_res) > -1) {\n          return _res;\n        }\n\n        throw parse.error(cc, \"This enumeration field must be one of the following: `\".concat(this.options.join(\"`, `\"), \"`\"));\n      } else {\n        throw parse.error(cc, \"Enumeration fields only accept strings and variables.\");\n      }\n    }\n  }]);\n\n  return WFEnumerationParameter;\n}(WFParameter_1.WFParameter);\n\nexports.WFEnumerationParameter = WFEnumerationParameter;","map":null,"metadata":{},"sourceType":"script"}