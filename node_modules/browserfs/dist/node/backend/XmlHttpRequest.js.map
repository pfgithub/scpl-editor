{"version":3,"file":"XmlHttpRequest.js","sourceRoot":"","sources":["../../../src/backend/XmlHttpRequest.ts"],"names":[],"mappings":"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","sourcesContent":["import {BaseFileSystem, FileSystem, BFSCallback, FileSystemOptions} from '../core/file_system';\nimport {ApiError, ErrorCode} from '../core/api_error';\nimport {FileFlag, ActionType} from '../core/file_flag';\nimport {copyingSlice, deprecationMessage} from '../core/util';\nimport {File} from '../core/file';\nimport Stats from '../core/node_fs_stats';\nimport {NoSyncFile} from '../generic/preload_file';\nimport {asyncDownloadFile, syncDownloadFile, getFileSizeAsync, getFileSizeSync} from '../generic/xhr';\nimport {FileIndex, isFileInode, isDirInode} from '../generic/file_index';\n\n/**\n * Try to convert the given buffer into a string, and pass it to the callback.\n * Optimization that removes the needed try/catch into a helper function, as\n * this is an uncommon case.\n * @hidden\n */\nfunction tryToString(buff: Buffer, encoding: string, cb: BFSCallback<string>) {\n  try {\n    cb(null, buff.toString(encoding));\n  } catch (e) {\n    cb(e);\n  }\n}\n\n/**\n * Configuration options for an XmlHttpRequest file system.\n */\nexport interface XmlHttpRequestOptions {\n  // URL to a file index as a JSON file or the file index object itself, generated with the make_xhrfs_index script.\n  // Defaults to `index.json`.\n  index?: string | object;\n  // Used as the URL prefix for fetched files.\n  // Default: Fetch files relative to the index.\n  baseUrl?: string;\n}\n\n/**\n * A simple filesystem backed by XMLHttpRequests. You must create a directory listing using the\n * `make_xhrfs_index` tool provided by BrowserFS.\n *\n * If you install BrowserFS globally with `npm i -g browserfs`, you can generate a listing by\n * running `make_xhrfs_index` in your terminal in the directory you would like to index:\n *\n * ```\n * make_xhrfs_index > index.json\n * ```\n *\n * Listings objects look like the following:\n *\n * ```json\n * {\n *   \"home\": {\n *     \"jvilk\": {\n *       \"someFile.txt\": null,\n *       \"someDir\": {\n *         // Empty directory\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * *This example has the folder `/home/jvilk` with subfile `someFile.txt` and subfolder `someDir`.*\n */\nexport default class XmlHttpRequest extends BaseFileSystem implements FileSystem {\n  public static readonly Name = \"XmlHttpRequest\";\n\n  public static readonly Options: FileSystemOptions = {\n    index: {\n      type: [\"string\", \"object\"],\n      optional: true,\n      description: \"URL to a file index as a JSON file or the file index object itself, generated with the make_xhrfs_index script. Defaults to `index.json`.\"\n    },\n    baseUrl: {\n      type: \"string\",\n      optional: true,\n      description: \"Used as the URL prefix for fetched files. Default: Fetch files relative to the index.\"\n    }\n  };\n\n  /**\n   * Construct an XmlHttpRequest file system backend with the given options.\n   */\n  public static Create(opts: XmlHttpRequestOptions, cb: BFSCallback<XmlHttpRequest>): void {\n    if (opts.index === undefined) {\n      opts.index = `index.json`;\n    }\n    if (typeof(opts.index) === \"string\") {\n      XmlHttpRequest.FromURL(opts.index, cb, opts.baseUrl, false);\n    } else {\n      cb(null, new XmlHttpRequest(opts.index, opts.baseUrl, false));\n    }\n  }\n  public static isAvailable(): boolean {\n    return typeof(XMLHttpRequest) !== \"undefined\" && XMLHttpRequest !== null;\n  }\n  /**\n   * **Deprecated. Please use XmlHttpRequest.Create() method instead to construct XmlHttpRequest objects.**\n   *\n   * Constructs an XmlHttpRequest object using the directory listing at the given URL.\n   * Uses the base URL as the URL prefix for fetched files.\n   * @param cb Called when the file system has been instantiated, or if an error occurs.\n   */\n  public static FromURL(url: string, cb: BFSCallback<XmlHttpRequest>, baseUrl = url.slice(0, url.lastIndexOf('/') + 1), deprecateMsg = true): void {\n    if (deprecateMsg) {\n      console.warn(`[XmlHttpRequest] XmlHttpRequest.FromURL() is deprecated and will be removed in the next major release. Please use 'XmlHttpRequest.Create({ index: \"${url}\", baseUrl: \"${baseUrl}\" }, cb)' instead.`);\n    }\n    asyncDownloadFile(url, \"json\", (e, data?) => {\n      if (e) {\n        cb(e);\n      } else {\n        cb(null, new XmlHttpRequest(data, baseUrl, false));\n      }\n    });\n  }\n\n  public readonly prefixUrl: string;\n  private _index: FileIndex<{}>;\n  /**\n   * **Deprecated. Please use XmlHttpRequest.Create() method instead to construct XmlHttpRequest objects.**\n   *\n   * Constructs the file system. You must provide the directory listing as a JSON object\n   * produced by the `make_xhrfs_index` script.\n   *\n   * **DEPRECATED:** You may pass a URL to the file index to the constructor, which will fetch the file index\n   * *synchronously* and may freeze up the web page. This behavior will be removed in the next major version\n   * of BrowserFS.\n   *\n   * @param listingUrlOrObj index object or the path to the JSON file index generated by\n   *   `make_xhrfs_index`.\n   * @param prefixUrl URL that is prepended to any file locations in the file index. e.g. if `prefixUrl = 'data/`, and the user wants to open the file `/foo.txt`,\n   * the file system will fetch file `data/foo.txt`. The browser will access the file relative to the currrent webpage\n   * URL.\n   */\n  constructor(listingUrlOrObj: string | object, prefixUrl: string = '', deprecateMsg = true) {\n    super();\n    if (!listingUrlOrObj) {\n      listingUrlOrObj = 'index.json';\n    }\n    // prefix_url must end in a directory separator.\n    if (prefixUrl.length > 0 && prefixUrl.charAt(prefixUrl.length - 1) !== '/') {\n      prefixUrl = prefixUrl + '/';\n    }\n    this.prefixUrl = prefixUrl;\n\n    let listing: object | null = null;\n    if (typeof(listingUrlOrObj) === \"string\") {\n      listing = this._requestFileSync(<string> listingUrlOrObj, 'json');\n      if (!listing) {\n        throw new Error(\"Unable to find listing at URL: ${listingUrlOrObj}\");\n      }\n    } else {\n      listing = listingUrlOrObj;\n    }\n    deprecationMessage(deprecateMsg, XmlHttpRequest.Name, { index: typeof(listingUrlOrObj) === \"string\" ? listingUrlOrObj : \"file index as an object\", baseUrl: prefixUrl});\n\n    this._index = FileIndex.fromListing(listing);\n  }\n\n  public empty(): void {\n    this._index.fileIterator(function(file: Stats) {\n      file.fileData = null;\n    });\n  }\n\n  public getName(): string {\n    return XmlHttpRequest.Name;\n  }\n\n  public diskSpace(path: string, cb: (total: number, free: number) => void): void {\n    // Read-only file system. We could calculate the total space, but that's not\n    // important right now.\n    cb(0, 0);\n  }\n\n  public isReadOnly(): boolean {\n    return true;\n  }\n\n  public supportsLinks(): boolean {\n    return false;\n  }\n\n  public supportsProps(): boolean {\n    return false;\n  }\n\n  public supportsSynch(): boolean {\n    return true;\n  }\n\n  /**\n   * Special XHR function: Preload the given file into the index.\n   * @param [String] path\n   * @param [BrowserFS.Buffer] buffer\n   */\n  public preloadFile(path: string, buffer: Buffer): void {\n    const inode = this._index.getInode(path);\n    if (isFileInode<Stats>(inode)) {\n      if (inode === null) {\n        throw ApiError.ENOENT(path);\n      }\n      const stats = inode.getData();\n      stats.size = buffer.length;\n      stats.fileData = buffer;\n    } else {\n      throw ApiError.EISDIR(path);\n    }\n  }\n\n  public stat(path: string, isLstat: boolean, cb: BFSCallback<Stats>): void {\n    const inode = this._index.getInode(path);\n    if (inode === null) {\n      return cb(ApiError.ENOENT(path));\n    }\n    let stats: Stats;\n    if (isFileInode<Stats>(inode)) {\n      stats = inode.getData();\n      // At this point, a non-opened file will still have default stats from the listing.\n      if (stats.size < 0) {\n        this._requestFileSizeAsync(path, function(e: ApiError, size?: number) {\n          if (e) {\n            return cb(e);\n          }\n          stats.size = size!;\n          cb(null, stats.clone());\n        });\n      } else {\n        cb(null, stats.clone());\n      }\n    } else if (isDirInode(inode)) {\n      stats = inode.getStats();\n      cb(null, stats);\n    } else {\n      cb(ApiError.FileError(ErrorCode.EINVAL, path));\n    }\n  }\n\n  public statSync(path: string, isLstat: boolean): Stats {\n    const inode = this._index.getInode(path);\n    if (inode === null) {\n      throw ApiError.ENOENT(path);\n    }\n    let stats: Stats;\n    if (isFileInode<Stats>(inode)) {\n      stats = inode.getData();\n      // At this point, a non-opened file will still have default stats from the listing.\n      if (stats.size < 0) {\n        stats.size = this._requestFileSizeSync(path);\n      }\n    } else if (isDirInode(inode)) {\n      stats = inode.getStats();\n    } else {\n      throw ApiError.FileError(ErrorCode.EINVAL, path);\n    }\n    return stats;\n  }\n\n  public open(path: string, flags: FileFlag, mode: number, cb: BFSCallback<File>): void {\n    // INVARIANT: You can't write to files on this file system.\n    if (flags.isWriteable()) {\n      return cb(new ApiError(ErrorCode.EPERM, path));\n    }\n    const self = this;\n    // Check if the path exists, and is a file.\n    const inode = this._index.getInode(path);\n    if (inode === null) {\n      return cb(ApiError.ENOENT(path));\n    }\n    if (isFileInode<Stats>(inode)) {\n      const stats = inode.getData();\n      switch (flags.pathExistsAction()) {\n        case ActionType.THROW_EXCEPTION:\n        case ActionType.TRUNCATE_FILE:\n          return cb(ApiError.EEXIST(path));\n        case ActionType.NOP:\n          // Use existing file contents.\n          // XXX: Uh, this maintains the previously-used flag.\n          if (stats.fileData) {\n            return cb(null, new NoSyncFile(self, path, flags, stats.clone(), stats.fileData));\n          }\n          // @todo be lazier about actually requesting the file\n          this._requestFileAsync(path, 'buffer', function(err: ApiError, buffer?: Buffer) {\n            if (err) {\n              return cb(err);\n            }\n            // we don't initially have file sizes\n            stats.size = buffer!.length;\n            stats.fileData = buffer!;\n            return cb(null, new NoSyncFile(self, path, flags, stats.clone(), buffer));\n          });\n          break;\n        default:\n          return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.'));\n      }\n    } else {\n      return cb(ApiError.EISDIR(path));\n    }\n  }\n\n  public openSync(path: string, flags: FileFlag, mode: number): File {\n    // INVARIANT: You can't write to files on this file system.\n    if (flags.isWriteable()) {\n      throw new ApiError(ErrorCode.EPERM, path);\n    }\n    // Check if the path exists, and is a file.\n    const inode = this._index.getInode(path);\n    if (inode === null) {\n      throw ApiError.ENOENT(path);\n    }\n    if (isFileInode<Stats>(inode)) {\n      const stats = inode.getData();\n      switch (flags.pathExistsAction()) {\n        case ActionType.THROW_EXCEPTION:\n        case ActionType.TRUNCATE_FILE:\n          throw ApiError.EEXIST(path);\n        case ActionType.NOP:\n          // Use existing file contents.\n          // XXX: Uh, this maintains the previously-used flag.\n          if (stats.fileData) {\n            return new NoSyncFile(this, path, flags, stats.clone(), stats.fileData);\n          }\n          // @todo be lazier about actually requesting the file\n          const buffer = this._requestFileSync(path, 'buffer');\n          // we don't initially have file sizes\n          stats.size = buffer.length;\n          stats.fileData = buffer;\n          return new NoSyncFile(this, path, flags, stats.clone(), buffer);\n        default:\n          throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');\n      }\n    } else {\n      throw ApiError.EISDIR(path);\n    }\n  }\n\n  public readdir(path: string, cb: BFSCallback<string[]>): void {\n    try {\n      cb(null, this.readdirSync(path));\n    } catch (e) {\n      cb(e);\n    }\n  }\n\n  public readdirSync(path: string): string[] {\n    // Check if it exists.\n    const inode = this._index.getInode(path);\n    if (inode === null) {\n      throw ApiError.ENOENT(path);\n    } else if (isDirInode(inode)) {\n      return inode.getListing();\n    } else {\n      throw ApiError.ENOTDIR(path);\n    }\n  }\n\n  /**\n   * We have the entire file as a buffer; optimize readFile.\n   */\n  public readFile(fname: string, encoding: string, flag: FileFlag, cb: BFSCallback<string | Buffer>): void {\n    // Wrap cb in file closing code.\n    const oldCb = cb;\n    // Get file.\n    this.open(fname, flag, 0x1a4, function(err: ApiError, fd?: File) {\n      if (err) {\n        return cb(err);\n      }\n      cb = function(err: ApiError, arg?: Buffer) {\n        fd!.close(function(err2: any) {\n          if (!err) {\n            err = err2;\n          }\n          return oldCb(err, arg);\n        });\n      };\n      const fdCast = <NoSyncFile<XmlHttpRequest>> fd;\n      const fdBuff = <Buffer> fdCast.getBuffer();\n      if (encoding === null) {\n        cb(err, copyingSlice(fdBuff));\n      } else {\n        tryToString(fdBuff, encoding, cb);\n      }\n    });\n  }\n\n  /**\n   * Specially-optimized readfile.\n   */\n  public readFileSync(fname: string, encoding: string, flag: FileFlag): any {\n    // Get file.\n    const fd = this.openSync(fname, flag, 0x1a4);\n    try {\n      const fdCast = <NoSyncFile<XmlHttpRequest>> fd;\n      const fdBuff = <Buffer> fdCast.getBuffer();\n      if (encoding === null) {\n        return copyingSlice(fdBuff);\n      }\n      return fdBuff.toString(encoding);\n    } finally {\n      fd.closeSync();\n    }\n  }\n\n  private getXhrPath(filePath: string): string {\n    if (filePath.charAt(0) === '/') {\n      filePath = filePath.slice(1);\n    }\n    return this.prefixUrl + filePath;\n  }\n\n  /**\n   * Asynchronously download the given file.\n   */\n  private _requestFileAsync(p: string, type: 'buffer', cb: BFSCallback<Buffer>): void;\n  private _requestFileAsync(p: string, type: 'json', cb: BFSCallback<any>): void;\n  private _requestFileAsync(p: string, type: string, cb: BFSCallback<any>): void;\n  private _requestFileAsync(p: string, type: string, cb: BFSCallback<any>): void {\n    asyncDownloadFile(this.getXhrPath(p), type, cb);\n  }\n\n  /**\n   * Synchronously download the given file.\n   */\n  private _requestFileSync(p: string, type: 'buffer'): Buffer;\n  private _requestFileSync(p: string, type: 'json'): any;\n  private _requestFileSync(p: string, type: string): any;\n  private _requestFileSync(p: string, type: string): any {\n    return syncDownloadFile(this.getXhrPath(p), type);\n  }\n\n  /**\n   * Only requests the HEAD content, for the file size.\n   */\n  private _requestFileSizeAsync(path: string, cb: BFSCallback<number>): void {\n    getFileSizeAsync(this.getXhrPath(path), cb);\n  }\n  private _requestFileSizeSync(path: string): number {\n    return getFileSizeSync(this.getXhrPath(path));\n  }\n}\n"]}