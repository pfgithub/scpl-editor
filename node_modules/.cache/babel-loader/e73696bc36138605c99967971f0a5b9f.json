{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar WFParameter_1 = require(\"./WFParameter\");\n\nvar WFTextInputParameter =\n/*#__PURE__*/\nfunction (_WFParameter_1$WFPara) {\n  _inherits(WFTextInputParameter, _WFParameter_1$WFPara);\n\n  function WFTextInputParameter(data) {\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Text\";\n    var docs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"https://pfgithub.github.io/shortcutslang/gettingstarted#text-field\";\n\n    _classCallCheck(this, WFTextInputParameter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WFTextInputParameter).call(this, data, name, docs));\n  }\n\n  _createClass(WFTextInputParameter, [{\n    key: \"genDocsArgName\",\n    value: function genDocsArgName() {\n      return \"\\\"string\\\"\";\n    }\n  }, {\n    key: \"genDocs\",\n    value: function genDocs() {\n      return \"\".concat(_get(_getPrototypeOf(WFTextInputParameter.prototype), \"genDocs\", this).call(this), \"\\n\\nAccepts a string \").concat(this.allowsVariables ? \"\\nor text\" : \"\", \"\\nwith the text. \").concat(this._data.Multiline ? \"Allows newlines.\" : \"Does not allow newlines.\");\n    }\n  }, {\n    key: \"genDocsDefaultValue\",\n    value: function genDocsDefaultValue(value) {\n      return \"`\\\"\".concat(value, \"\\\"`\");\n    }\n  }, {\n    key: \"build\",\n    value: function build(cc, parse) {\n      if (!this.allowsVariables) {\n        if (!parse.canBeString(cc)) {\n          throw parse.error(cc, \"This text field only accepts text with no variables.\");\n        }\n\n        var strData = parse.asString(cc);\n\n        if (!this._data.Multiline && strData.indexOf(\"\\n\") > -1) {\n          throw parse.error(cc, \"Newlines are not allowed in this text field.\");\n        }\n\n        return strData;\n      }\n\n      if (!parse.canBeText(cc)) {\n        throw parse.error(cc, \"Text fields only accept text.\");\n      }\n\n      var textData = parse.asText(cc);\n\n      if (!this._data.Multiline && textData._components.find(function (component) {\n        return typeof component === \"string\" ? component.indexOf(\"\\n\") > -1 : false;\n      })) {\n        throw parse.error(cc, \"Newlines are not allowed in this text field. Use a variable with a newline instead.\");\n      }\n\n      return textData;\n    }\n  }]);\n\n  return WFTextInputParameter;\n}(WFParameter_1.WFParameter);\n\nexports.WFTextInputParameter = WFTextInputParameter;","map":null,"metadata":{},"sourceType":"script"}