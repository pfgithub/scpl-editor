{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/brandonjordan/Documents/GitHub/scpl-editor/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar OutputData_1 = require(\"./OutputData\");\n\nvar ActionData_1 = require(\"./ActionData\");\n\nvar ShortcutMeta_1 = require(\"./Data/ShortcutMeta\");\n\nvar NUMBER = /^-?(?:[0-9]*\\.[0-9]+|[0-9]+)$/;\nvar IDENTIFIER = /^[A-Za-z@_][A-Za-z0-9@_]*$/;\n\nvar ESCAPEDQUOTEDSTRING = function ESCAPEDQUOTEDSTRING(value) {\n  return value.replace(/([\"\\\\\\n])/g, function (d) {\n    return d === \"\\n\" ? \"\\\\n\" : \"\\\\\".concat(d);\n  }).replace(/\\r/g, \"\");\n};\n\nvar DQUOTEDSTRING = function DQUOTEDSTRING(value) {\n  return \"\\\"\".concat(ESCAPEDQUOTEDSTRING(value), \"\\\"\");\n};\n\nvar ESCAPESQUOTEDSTRING = function ESCAPESQUOTEDSTRING(value) {\n  return value.replace(/(['\\\\\\n])/g, function (d) {\n    return d === \"\\n\" ? \"\\\\n\" : \"\\\\\".concat(d);\n  }).replace(/\\r/g, \"\");\n};\n\nvar SQUOTEDSTRING = function SQUOTEDSTRING(value) {\n  return \"\\\"\".concat(ESCAPESQUOTEDSTRING(value), \"\\\"\");\n}; // FOR NOW:\n// put argument labels on all arguments\n// FOR FUTURE:\n// look at wfrequiredresources and order things to avoid argument labels as much as possible\n\n\nvar InverseConvertingContext =\n/*#__PURE__*/\nfunction () {\n  function InverseConvertingContext() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, InverseConvertingContext);\n\n    this.magicVariablesByName = {};\n    this.magicVariablesByUUID = {};\n    this.quotes = options.quotes || '\"';\n\n    if (typeof options.indent === \"number\") {\n      options.indent = \" \".repeat(options.indent);\n    }\n\n    this.indent = options.indent || \"\\t\";\n    this._indentLevel = 0;\n  }\n\n  _createClass(InverseConvertingContext, [{\n    key: \"createActionsAble\",\n    value: function createActionsAble(value) {\n      var _this = this;\n\n      var res = value.actions.map(function (action) {\n        var createdAction = _this.createActionAble(action);\n\n        return \"\".concat(createdAction);\n      });\n\n      if (value.color) {\n        res.unshift(\"@Color \".concat(ShortcutMeta_1.inverseColors[value.color]));\n      }\n\n      if (value.glyph) {\n        res.unshift(\"@Icon \".concat(ShortcutMeta_1.inverseGlyphs[value.glyph]));\n      }\n\n      return res.join(\"\\n\");\n    }\n  }, {\n    key: \"createActionAble\",\n    value: function createActionAble(value) {\n      var _this2 = this;\n\n      var result = []; // get action data\n\n      var actionData = ActionData_1.getActionFromID(value.id);\n\n      if (!actionData) {\n        return \"??unknown action with id \".concat(value.id.replace(/[^A-Za-z0-9.]/g, \"\"), \"??\");\n      } // let parameters = actionData.getParameters();\n\n\n      var order = actionData.getParameterOrder(); // TODO future\n\n      order.forEach(function (param) {\n        if (typeof param === \"string\") {\n          return result.push(\"??\".concat(param.replace(/[^A-Za-z0-9 ]/g, \"\"), \"??\"));\n        }\n\n        var paramValue = value.parameters.get(param.internalName);\n\n        if (paramValue === undefined) {\n          return;\n        }\n\n        if (order.length === 1) {\n          return result.push(_this2.handleArgument(OutputData_1.toParam(paramValue)));\n        }\n\n        result.push(\"\".concat(param.readableName, \"=\").concat(_this2.handleArgument(OutputData_1.toParam(paramValue))));\n      });\n      var uuid = value.parameters.get(\"UUID\");\n\n      if (uuid) {\n        var baseName = value.magicvarname || value.name || actionData.name || actionData.readableName || actionData.internalName || \"??unnamed??\";\n        var name = baseName;\n\n        if (this.magicVariablesByName[name]) {\n          // magic variables needs to be both by name and by uuid\n          for (var i = 1; this.magicVariablesByName[name]; i++) {\n            name = baseName + i;\n          }\n        }\n\n        this.magicVariablesByName[name] = uuid;\n        this.magicVariablesByUUID[uuid] = name; // add -> argument\n\n        if (name.match(IDENTIFIER)) {\n          result.push(\"-> mv:\".concat(name));\n        } else {\n          result.push(\"-> mv:\".concat(this.quoteAndEscape(name)));\n        }\n      } // const magicVariable = <number|undefined>value.parameters.get(\"WFControlFlowMode\");\n\n\n      var actionName = actionData.readableName;\n      var indentLevel = this._indentLevel;\n      var paramResult = result.join(\" \");\n      var controlFlowMode = value.parameters.get(\"WFControlFlowMode\");\n\n      if (controlFlowMode === 1) {\n        indentLevel = this._indentLevel - 1;\n\n        if (value.id === \"is.workflow.actions.conditional\") {\n          actionName = \"Otherwise\";\n        } else if (value.id === \"is.workflow.actions.choosefrommenu\") {\n          actionName = \"Case\";\n        } else {\n          actionName = \"Flow\";\n        }\n      } else if (controlFlowMode === 2) {\n        this._indentLevel--;\n        indentLevel = this._indentLevel;\n        actionName = \"End\";\n      } else if (actionData._data.BlockInfo) {\n        this._indentLevel++;\n      }\n\n      return this.indent.repeat(indentLevel) + \"\".concat(actionName, \" \").concat(paramResult).trim();\n    }\n  }, {\n    key: \"handleArgument\",\n    value: function handleArgument(thing) {\n      if (typeof thing === \"string\") {\n        return this.createStringAble(thing);\n      }\n\n      if (typeof thing === \"number\") {\n        return this.createNumberAble(thing);\n      }\n\n      if (typeof thing === \"boolean\") {\n        return thing.toString();\n      }\n\n      if (thing instanceof OutputData_1.Attachment) {\n        return this.createVariableAble(thing);\n      }\n\n      if (thing instanceof OutputData_1.Text) {\n        return this.createTextAble(thing);\n      }\n\n      if (thing instanceof OutputData_1.Dictionary) {\n        return this.createDictionaryAble(thing);\n      }\n\n      if (thing instanceof OutputData_1.List) {\n        return this.createListAble(thing);\n      }\n\n      if (thing instanceof OutputData_1.AdjustOffset) {\n        return this.createAdjustOffsetAble(thing);\n      }\n\n      if (thing instanceof OutputData_1.ErrorParameter) {\n        return \"??error: \".concat(thing.text.replace(/[^A-Za-z0-9 :]/g, \"\"), \"??\");\n      }\n\n      return \"??this argument type is not supported yet??\";\n    }\n  }, {\n    key: \"createStringAble\",\n    value: function createStringAble(value) {\n      // One of: \"string\", ident, -1.5, \\n|barlist (ifend)\n      if (value.match(NUMBER)) {\n        return value;\n      }\n\n      if (value.match(IDENTIFIER)) {\n        return value;\n      }\n\n      return this.quoteAndEscape(value);\n    }\n  }, {\n    key: \"createNumberAble\",\n    value: function createNumberAble(data) {\n      var value = data.toString();\n\n      if (value.match(NUMBER)) {\n        return value;\n      }\n\n      if (value.match(IDENTIFIER)) {\n        return value;\n      }\n\n      return this.quoteAndEscape(value);\n    }\n  }, {\n    key: \"createListAble\",\n    value: function createListAble(value) {\n      var _this3 = this;\n\n      var items = value.getItems();\n      var result = items.map(function (item) {\n        if (typeof item === \"string\") {\n          return _this3.createStringAble(item);\n        }\n\n        if (typeof item === \"boolean\") {\n          return \"??booleans are not supported yet in lists in scpl. this boolean was \".concat(item, \"??\");\n        }\n\n        if (item instanceof OutputData_1.Text) {\n          return _this3.createTextAble(item);\n        }\n\n        if (item instanceof OutputData_1.Dictionary) {\n          return \"??dictionaries in lists are not supported yet??\"; // return this.createDictionaryAble(item);\n        }\n\n        if (item instanceof OutputData_1.List) {\n          return \"??lists in lists are not supported yet??\"; // return this.createListAble(item);\n        }\n      });\n      return \"[\".concat(result.join(\", \"), \"]\");\n    }\n  }, {\n    key: \"createDictionaryAble\",\n    value: function createDictionaryAble(value) {\n      var _this4 = this;\n\n      var result = value.items.map(function (item) {\n        var key = _this4.createTextAble(item.key, {\n          dontAllowOnlyVariable: true\n        });\n\n        if (typeof item.value === \"boolean\") {\n          return \"<boolean> \".concat(key, \": \").concat(item.value);\n        }\n\n        if (item.value instanceof OutputData_1.Attachment) {\n          return \"<file> \".concat(key, \": \").concat(_this4.handleArgument(item.value));\n        }\n\n        var value = _this4.handleArgument(item.value);\n\n        return \"\".concat(key, \": \").concat(value);\n      });\n      return \"{\".concat(result.join(\", \"), \"}\");\n    }\n  }, {\n    key: \"createAggrandizementsAble\",\n    value: function createAggrandizementsAble(value) {\n      if (!value) {\n        return \"\";\n      }\n\n      var aggrandizements = [];\n      var forKey = \"\";\n\n      if (value.getForKey) {\n        forKey = \".\".concat(this.createStringAble(value.getForKey));\n      } else if (value.coercionType) {\n        aggrandizements.push(\"as: \".concat(OutputData_1.inverseCoercionTypes[value.coercionType]));\n      }\n\n      if (value.getProperty) {\n        aggrandizements.push(\"get: \".concat(value.getProperty.name.toLowerCase().replace(/[^a-z]/g, \"\")));\n      }\n\n      var res = \"\";\n\n      if (forKey) {\n        res += forKey;\n      }\n\n      if (aggrandizements.length > 0) {\n        res += \"{\".concat(aggrandizements.join(\", \"), \"}\");\n      }\n\n      return res;\n    }\n  }, {\n    key: \"createVariableAble\",\n    value: function createVariableAble(value) {\n      // createVariAble\n      if (value instanceof OutputData_1.NamedVariable) {\n        if (value.varname.match(IDENTIFIER)) {\n          return \"v:\".concat(value.varname).concat(this.createAggrandizementsAble(value.aggrandizements));\n        }\n\n        return \"v:\".concat(this.quoteAndEscape(value.varname)).concat(this.createAggrandizementsAble(value.aggrandizements));\n      }\n\n      if (value instanceof OutputData_1.MagicVariable) {\n        var varname = this.magicVariablesByUUID[value.uuid];\n\n        if (!varname) {\n          return \"mv:??broken magic variable??\";\n        }\n\n        if (varname.match(IDENTIFIER)) {\n          return \"mv:\".concat(varname).concat(this.createAggrandizementsAble(value.aggrandizements));\n        }\n\n        return \"mv:\".concat(this.quoteAndEscape(varname)).concat(this.createAggrandizementsAble(value.aggrandizements));\n      }\n\n      var data = {\n        Clipboard: \"clipboard\",\n        Ask: \"askWhenRun\",\n        CurrentDate: \"currentDate\",\n        ExtensionInput: \"shortcutinput\",\n        Input: \"actioninput\",\n        Variable: undefined,\n        ActionOutput: undefined\n      };\n\n      if (!data[value.type]) {\n        return \"s:??internal error: attachmenttype is \".concat(value.type.replace(/[^A-Za-z0-9]/g, \"\"), \" which is not known about yet??\");\n      }\n\n      return \"s:\".concat(data[value.type]).concat(this.createAggrandizementsAble(value.aggrandizements));\n    }\n  }, {\n    key: \"createTextAble\",\n    value: function createTextAble(value) {\n      var _this5 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var components = value.components();\n      var firstComponent = components[0];\n\n      if (components.length === 1 && firstComponent instanceof OutputData_1.Attachment && !options.dontAllowOnlyVariable) {\n        return this.createVariableAble(firstComponent);\n      }\n\n      var resstr = \"\";\n      components.forEach(function (component) {\n        if (typeof component === \"string\") {\n          return resstr += ESCAPEDQUOTEDSTRING(component);\n        }\n\n        resstr += \"\\\\(\".concat(_this5.createVariableAble(component), \")\");\n      });\n\n      if (resstr.match(IDENTIFIER)) {\n        return resstr;\n      } // \\() will never match identifier\n\n\n      return \"\\\"\".concat(resstr, \"\\\"\");\n    }\n  }, {\n    key: \"createAdjustOffsetAble\",\n    value: function createAdjustOffsetAble(value) {\n      var _this6 = this;\n\n      if (value.opts.v === \"threearg\") {\n        return \"[\".concat(this.createStringAble(value.opts.mode), \" \").concat(value.opts.value instanceof OutputData_1.Attachment ? this.createVariableAble(value.opts.value) : value.opts.value, \" \").concat(this.createStringAble(value.opts.unit), \"]\");\n      }\n\n      if (value.opts.mode.startsWith(\"Get\")) {\n        return \"[\".concat(value.opts.mode.split(\" \").map(function (i) {\n          return _this6.createStringAble(i);\n        }).join(\" \"), \"]\");\n      }\n\n      return \"[\".concat(this.createStringAble(value.opts.mode), \"]\");\n    }\n  }, {\n    key: \"quoteAndEscape\",\n    value: function quoteAndEscape(val) {\n      if (this.quotes === \"'\") {\n        return SQUOTEDSTRING(val);\n      }\n\n      return DQUOTEDSTRING(val);\n    }\n  }]);\n\n  return InverseConvertingContext;\n}();\n\nexports.InverseConvertingContext = InverseConvertingContext;\n/*\n\ninvert(icc: InverseConvertingContext, value: unknown) {\n    if(value instanceof Variable) {return icc.variable(value);} // v:variable/mv:variable/s:variable\n    if(typeof value === \"string\") {\n        if(value.match(/[^A-Za-z]/)) {return value.replace(/([\"\\\\\\n])/g, \"\\\"$1\\\"\");} // \"Enum Value\"\n        return value; // EnumValue\n    }\n    return \"??invalid value??\";\n}\n\n*/","map":null,"metadata":{},"sourceType":"script"}